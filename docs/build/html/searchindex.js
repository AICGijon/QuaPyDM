Search.setIndex({"docnames": ["Datasets", "Evaluation", "ExplicitLossMinimization", "Home", "Installation", "Methods", "Model-Selection", "Plotting", "Protocols", "index", "modules", "quapy", "quapy.classification", "quapy.data", "quapy.method"], "filenames": ["Datasets.md", "Evaluation.md", "ExplicitLossMinimization.md", "Home.md", "Installation.rst", "Methods.md", "Model-Selection.md", "Plotting.md", "Protocols.md", "index.rst", "modules.rst", "quapy.rst", "quapy.classification.rst", "quapy.data.rst", "quapy.method.rst"], "titles": ["Datasets", "Evaluation", "Explicit Loss Minimization", "&lt;no title&gt;", "Installation", "Quantification Methods", "Model Selection", "Plotting", "Protocols", "Welcome to QuaPy\u2019s documentation!", "quapy", "quapy package", "quapy.classification package", "quapy.data package", "quapy.method package"], "terms": {"quapi": [0, 1, 2, 3, 4, 5, 6, 7, 8], "make": [0, 2, 5, 11, 14], "avail": [0, 1, 2, 4, 5, 7, 9, 12, 14], "sever": [0, 2, 13], "have": [0, 1, 4, 5, 6, 7, 8, 11, 13, 14], "been": [0, 5, 6, 7, 8, 11, 12, 13, 14], "us": [0, 1, 5, 6, 7, 8, 9, 11, 12, 13, 14], "quantif": [0, 1, 2, 8, 9, 11, 12, 13, 14], "literatur": [0, 1, 6, 8, 9], "well": [0, 5, 7, 14], "an": [0, 1, 2, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14], "interfac": [0, 1, 5, 14], "allow": [0, 2, 4, 5, 7, 8, 11, 12, 13, 14], "anyon": 0, "import": [0, 5, 6, 7, 8, 9, 13, 14], "A": [0, 1, 5, 11, 12, 13, 14], "object": [0, 8, 11, 12, 13, 14], "i": [0, 1, 2, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14], "roughli": 0, "pair": [0, 11], "labelledcollect": [0, 5, 6, 8, 11, 13, 14], "one": [0, 1, 2, 5, 6, 7, 8, 11, 13, 14], "plai": 0, "role": 0, "train": [0, 1, 5, 6, 7, 8, 9, 11, 12, 13, 14], "set": [0, 1, 5, 6, 7, 8, 9, 11, 12, 13, 14], "anoth": [0, 1, 5, 7, 8, 11], "test": [0, 1, 5, 6, 7, 8, 9, 11, 12, 13, 14], "class": [0, 1, 5, 6, 7, 8, 9, 11, 12, 13, 14], "consist": [0, 6, 7, 8, 11, 12, 13, 14], "iter": [0, 11, 13, 14], "instanc": [0, 1, 5, 6, 7, 8, 9, 11, 12, 13, 14], "label": [0, 5, 6, 7, 8, 9, 11, 12, 13, 14], "thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14], "handl": 0, "most": [0, 1, 5, 7, 8, 9, 11, 13, 14], "sampl": [0, 1, 5, 6, 7, 9, 11, 12, 13, 14], "function": [0, 1, 5, 6, 7, 8, 9, 10, 12, 13, 14], "take": [0, 5, 7, 8, 11, 13, 14], "look": [0, 5, 7, 14], "follow": [0, 1, 5, 6, 7, 8, 9, 11, 14], "code": [0, 1, 2, 5, 6, 7, 8, 12], "qp": [0, 1, 5, 6, 7, 8, 9, 11, 13, 14], "f": [0, 1, 5, 6, 7, 8, 9, 13], "1st": 0, "posit": [0, 5, 7, 11, 13, 14], "document": [0, 5, 7, 12, 13, 14], "2nd": 0, "onli": [0, 1, 5, 7, 11, 12, 13, 14], "neg": [0, 7, 11, 14], "neutral": 0, "3rd": 0, "2": [0, 1, 5, 6, 7, 8, 11, 13, 14], "0": [0, 1, 5, 6, 7, 8, 11, 12, 13, 14], "1": [0, 1, 5, 6, 7, 8, 9, 11, 12, 13, 14], "print": [0, 1, 5, 6, 8, 9, 12, 13], "strprev": [0, 1, 11], "preval": [0, 1, 5, 6, 7, 9, 11, 12, 13, 14], "prec": [0, 11], "output": [0, 1, 5, 6, 8, 11, 12, 13, 14], "show": [0, 3, 5, 6, 7, 8, 11, 12, 13, 14], "digit": 0, "precis": [0, 11], "17": [0, 5], "50": [0, 7, 11, 14], "33": [0, 7, 11], "One": [0, 1, 5, 8, 14], "can": [0, 1, 4, 5, 6, 7, 8, 11, 13, 14], "easili": [0, 4, 7, 12], "produc": [0, 1, 7, 8, 11], "new": [0, 5, 8, 11, 12, 13], "desir": [0, 1, 5, 8, 11, 13], "sample_s": [0, 1, 5, 6, 7, 8, 11, 14], "10": [0, 6, 7, 8, 11, 12, 14], "prev": [0, 1, 8, 11, 13], "4": [0, 1, 5, 6, 7, 8, 9, 13, 14], "5": [0, 1, 5, 6, 7, 8, 11, 12, 13, 14], "which": [0, 1, 5, 6, 7, 11, 12, 13, 14], "40": [0, 5, 14], "made": [0, 2, 4, 11, 13, 14], "across": [0, 6, 7, 9, 11, 14], "differ": [0, 5, 6, 7, 8, 9, 11, 13, 14], "run": [0, 2, 4, 5, 7, 11, 13, 14], "e": [0, 1, 5, 6, 7, 8, 9, 11, 12, 13, 14], "g": [0, 1, 5, 6, 8, 9, 11, 13, 14], "method": [0, 1, 2, 3, 6, 7, 8, 9, 11], "same": [0, 5, 6, 7, 8, 11, 13, 14], "exact": [0, 8, 13], "retain": [0, 5, 12, 14], "index": [0, 5, 9, 11, 12, 13, 14], "gener": [0, 1, 5, 6, 7, 8, 11, 12, 13, 14], "sampling_index": [0, 13], "sampling_from_index": [0, 13], "also": [0, 1, 2, 4, 5, 6, 7, 8, 9, 11, 12], "implement": [0, 1, 5, 6, 7, 8, 9, 11, 12, 13, 14], "artifici": [0, 5, 6, 7, 9, 11], "protocol": [0, 3, 5, 6, 7, 9, 10, 13, 14], "via": [0, 4, 5, 8, 11, 12, 14], "python": [0, 9], "": [0, 1, 5, 6, 7, 11, 12, 13, 14], "seri": [0, 6, 13], "equidist": [0, 11], "rang": [0, 6, 7, 8, 11, 14], "entir": [0, 1, 5, 6, 7, 8, 11], "spectrum": [0, 7, 8, 11], "simplex": [0, 9, 11], "space": [0, 6, 11, 12], "artificial_sampling_gener": 0, "100": [0, 1, 5, 6, 7, 8, 11, 12, 13, 14], "n_preval": [0, 8, 11], "each": [0, 1, 5, 6, 7, 8, 11, 12, 13, 14], "valid": [0, 5, 6, 7, 8, 11, 12, 13, 14], "combin": [0, 6, 8, 11, 14], "origin": [0, 1, 5, 8, 11, 13], "from": [0, 1, 5, 6, 7, 9, 11, 12, 13, 14], "split": [0, 5, 6, 7, 11, 12, 13, 14], "point": [0, 5, 8, 11, 13], "25": [0, 7, 11, 12, 14], "75": [0, 6, 7, 8, 11], "00": 0, "see": [0, 2, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14], "evalu": [0, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14], "wiki": [0, 1, 3, 5], "further": [0, 5, 12, 13, 14], "detail": [0, 1, 2, 5, 9, 12, 13, 14], "how": [0, 5, 6, 7, 11, 13, 14], "properli": [0, 5, 14], "three": [0, 7], "about": [0, 7, 11, 13], "kindl": [0, 5, 7, 13, 14], "devic": [0, 5, 7, 12, 14], "harri": 0, "potter": 0, "known": [0, 5, 6, 11, 14], "imdb": [0, 6, 7, 8, 13], "movi": 0, "fetch": [0, 9], "unifi": [0, 14], "For": [0, 1, 6, 7, 8, 9, 11, 13], "exampl": [0, 2, 3, 5, 6, 7, 8, 11, 12, 13, 14], "fetch_review": [0, 5, 6, 7, 8, 13, 14], "These": [0, 1, 2, 5, 8, 12], "esuli": [0, 2, 4, 5, 12, 13, 14], "moreo": [0, 5, 6, 13, 14], "sebastiani": [0, 5, 6, 13, 14], "2018": [0, 5, 13], "octob": [0, 5], "recurr": [0, 5, 13], "neural": [0, 11, 13], "network": [0, 11, 12, 13, 14], "In": [0, 1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14], "proceed": [0, 5, 13], "27th": [0, 5, 13], "acm": [0, 5, 13, 14], "intern": [0, 1, 5, 12, 13], "confer": [0, 5, 12, 13], "inform": [0, 5, 6, 8, 11, 12, 13, 14], "knowledg": [0, 5, 13], "manag": [0, 5, 13], "pp": [0, 5, 6, 12], "1775": [0, 5], "1778": [0, 5], "The": [0, 1, 2, 4, 6, 7, 8, 9, 11, 12, 13, 14], "list": [0, 7, 11, 12, 13, 14], "id": [0, 5, 13], "reviews_sentiment_dataset": [0, 13], "some": [0, 1, 5, 7, 8, 11, 13, 14], "statist": [0, 8, 11, 14], "fhe": 0, "ar": [0, 1, 5, 6, 7, 8, 11, 12, 13, 14], "summar": 0, "below": [0, 4, 5, 7, 11, 13], "size": [0, 1, 5, 11, 12, 13, 14], "type": [0, 5, 11, 13, 14], "hp": [0, 5, 13], "9533": 0, "18399": 0, "018": 0, "982": 0, "065": 0, "935": 0, "text": [0, 5, 11, 12, 13, 14], "3821": [0, 13], "21591": [0, 13], "081": [0, 13], "919": [0, 13], "063": [0, 13], "937": [0, 13], "25000": 0, "500": [0, 1, 7, 14], "11": [0, 8, 9, 11], "analysi": [0, 5, 9, 13], "access": [0, 5, 13, 14], "were": 0, "tf": [0, 13], "idf": 0, "format": [0, 7, 11, 13, 14], "present": [0, 5, 13], "two": [0, 5, 7, 8, 11, 13, 14], "val": [0, 8, 12, 13], "model": [0, 1, 3, 7, 8, 9, 11, 12, 14], "select": [0, 1, 3, 5, 8, 9, 11, 13, 14], "purpos": [0, 8, 14], "exemplifi": 0, "load": [0, 5, 8, 11, 13, 14], "fetch_twitt": [0, 5, 9, 13], "gasp": [0, 13], "for_model_select": [0, 13], "true": [0, 1, 5, 6, 7, 8, 9, 11, 12, 13, 14], "gao": [0, 5, 13, 14], "w": [0, 5, 13], "2015": [0, 2, 4, 5, 12, 14], "august": 0, "tweet": [0, 5, 13], "classif": [0, 1, 5, 9, 11, 13, 14], "ieee": 0, "advanc": [0, 6, 8, 9, 11], "social": [0, 5, 13], "mine": [0, 5], "asonam": 0, "97": 0, "104": [0, 1], "semeval13": [0, 13], "semeval14": [0, 13], "semeval15": [0, 13], "share": [0, 13], "semev": 0, "mean": [0, 1, 5, 6, 7, 8, 9, 11, 12, 13, 14], "would": [0, 1, 5, 7, 9, 13, 14], "get": [0, 7, 8, 11, 12, 13, 14], "when": [0, 1, 5, 7, 8, 11, 12, 13], "request": [0, 6, 11, 13, 14], "ani": [0, 5, 6, 7, 8, 9, 11, 12, 13, 14], "them": [0, 5, 13, 14], "consult": [0, 8], "twitter_sentiment_datasets_test": [0, 13], "9": [0, 5, 7, 11], "replac": [0, 5, 11, 13], "twitter_sentiment_datasets_train": [0, 13], "found": [0, 5, 11, 12, 13], "featur": [0, 13], "3": [0, 1, 5, 6, 7, 8, 9, 11, 12, 13, 14], "8788": 0, "3765": 0, "694582": 0, "421": 0, "496": 0, "082": 0, "407": 0, "507": 0, "086": 0, "spars": [0, 13], "hcr": [0, 5, 13], "1594": 0, "798": 0, "222046": 0, "546": 0, "211": 0, "243": 0, "640": 0, "167": 0, "193": 0, "omd": [0, 13], "1839": 0, "787": 0, "199151": 0, "463": 0, "271": 0, "266": 0, "437": 0, "283": 0, "280": 0, "sander": [0, 13], "2155": 0, "923": 0, "229399": 0, "161": 0, "691": 0, "148": 0, "164": [0, 5], "688": 0, "11338": 0, "3813": 0, "1215742": 0, "159": 0, "470": 0, "372": 0, "158": 0, "430": 0, "412": 0, "1853": 0, "109": 0, "361": 0, "530": 0, "2390": 0, "153": 0, "413": 0, "434": 0, "semeval16": [0, 9, 13], "8000": 0, "2000": 0, "889504": 0, "157": 0, "351": 0, "492": 0, "163": 0, "341": 0, "497": 0, "sst": [0, 13], "2971": 0, "1271": 0, "376132": 0, "261": 0, "452": 0, "288": 0, "207": 0, "481": 0, "312": 0, "wa": [0, 5, 7, 8, 11, 13, 14], "2184": 0, "936": 0, "248563": 0, "305": 0, "414": 0, "281": 0, "282": 0, "446": 0, "272": [0, 1], "wb": [0, 13], "4259": 0, "1823": 0, "404333": 0, "270": 0, "392": 0, "337": 0, "274": 0, "335": 0, "32": [0, 6, 9], "repositori": [0, 13], "p\u00e9rez": [0, 5, 13, 14], "g\u00e1llego": [0, 5, 13, 14], "p": [0, 5, 11, 12, 13, 14], "quevedo": [0, 5, 13], "j": [0, 5, 13, 14], "r": [0, 5, 11, 13], "del": [0, 5, 13], "coz": [0, 5, 13], "2017": [0, 5, 13, 14], "ensembl": [0, 9, 13, 14], "problem": [0, 5, 7, 11, 13, 14], "characteriz": [0, 5, 13], "chang": [0, 1, 5, 13], "distribut": [0, 1, 5, 7, 8, 11, 13, 14], "case": [0, 1, 5, 7, 8, 11, 12, 13, 14], "studi": [0, 5, 13], "fusion": [0, 5, 13], "34": [0, 5, 13, 14], "87": [0, 5, 13], "doe": [0, 2, 4, 5, 11, 14], "exactli": 0, "coincid": [0, 9], "et": [0, 2, 4, 5, 12, 13, 14], "al": [0, 2, 4, 5, 12, 13, 14], "sinc": [0, 1, 5, 6, 7, 8, 13, 14], "we": [0, 1, 3, 5, 6, 7, 8, 9, 13], "unabl": 0, "find": [0, 6, 14], "diabet": 0, "phonem": 0, "call": [0, 1, 5, 7, 8, 11, 13, 14], "fetch_ucidataset": [0, 5, 13], "yeast": [0, 13], "verbos": [0, 6, 11, 12, 13, 14], "return": [0, 1, 5, 6, 7, 8, 11, 12, 13, 14], "randomli": [0, 13], "drawn": [0, 8, 11, 13], "stratifi": [0, 5, 12, 13, 14], "manner": [0, 12, 14], "whole": [0, 1, 5, 6, 11, 12], "collect": [0, 8, 11, 12, 13], "70": 0, "30": [0, 5, 6, 8, 14], "respect": [0, 1, 7, 11, 14], "option": [0, 5, 7, 13, 14], "indic": [0, 1, 5, 6, 7, 8, 11, 12, 13, 14], "descript": [0, 13], "should": [0, 5, 6, 7, 9, 11, 12, 13, 14], "standard": [0, 7, 8, 11, 12, 13, 14], "paper": [0, 5, 12, 14], "submit": 0, "kfcv": [0, 12, 13, 14], "order": [0, 4, 5, 6, 7, 8, 11, 13, 14], "accommod": [0, 11], "practic": 0, "could": [0, 1, 5, 6, 7, 8, 9], "first": [0, 1, 2, 4, 5, 7, 11, 13, 14], "instanti": [0, 1, 5, 6, 8, 11, 12, 14], "creat": [0, 9, 11, 14], "time": [0, 1, 5, 8, 11, 13, 14], "fetch_ucilabelledcollect": [0, 13], "nfold": [0, 11, 13], "nrepeat": [0, 13], "abov": [0, 2, 5, 7, 11], "conduct": [0, 11], "2x5fcv": 0, "all": [0, 1, 2, 4, 5, 7, 8, 11, 12, 14], "come": [0, 1, 8, 11, 13, 14], "numer": [0, 1, 5, 9, 13, 14], "form": [0, 11, 13, 14], "dens": [0, 14], "matric": [0, 7, 13], "acut": 0, "120": 0, "6": [0, 1, 5, 7, 13], "508": 0, "b": [0, 11, 13, 14], "583": 0, "417": 0, "balanc": [0, 6, 7, 14], "625": 0, "539": 0, "461": 0, "922": 0, "078": 0, "breast": 0, "cancer": 0, "683": 0, "350": 0, "650": 0, "cmc": 0, "1473": 0, "573": 0, "427": 0, "774": 0, "226": 0, "653": 0, "347": 0, "ctg": 0, "2126": 0, "22": [0, 5, 12, 13], "222": [0, 12], "778": 0, "861": 0, "139": 0, "917": 0, "083": 0, "german": 0, "1000": [0, 6, 14], "24": [0, 1, 12], "300": [0, 1, 12], "700": 0, "haberman": [0, 5], "306": 0, "735": 0, "265": 0, "ionospher": 0, "641": 0, "359": 0, "iri": 0, "150": 0, "667": 0, "333": 0, "mammograph": 0, "830": 0, "514": 0, "486": 0, "pageblock": 0, "5473": 0, "979": 0, "021": 0, "semeion": 0, "1593": 0, "256": [0, 12], "901": 0, "099": 0, "sonar": 0, "208": 0, "60": 0, "534": 0, "466": 0, "spambas": 0, "4601": 0, "57": 0, "606": 0, "394": 0, "spectf": 0, "267": 0, "44": 0, "794": 0, "206": 0, "tictacto": 0, "958": 0, "transfus": 0, "748": 0, "762": 0, "238": 0, "wdbc": 0, "569": 0, "627": 0, "373": 0, "wine": 0, "178": 0, "13": [0, 12], "669": 0, "331": 0, "601": 0, "399": 0, "730": 0, "q": [0, 2, 4, 5, 11, 12, 14], "red": 0, "1599": 0, "465": 0, "535": 0, "white": 0, "4898": 0, "665": 0, "1484": 0, "8": [0, 6, 7, 13, 14], "711": 0, "289": 0, "download": [0, 2, 4, 5, 11, 13], "automat": [0, 12], "thei": [0, 5, 14], "store": [0, 12, 13, 14], "quapy_data": [0, 11], "folder": [0, 6, 8, 13, 14], "faster": [0, 13], "reus": [0, 5, 11, 13], "howev": [0, 6, 7], "requir": [0, 1, 2, 5, 8, 9, 12], "special": [0, 7, 13], "action": 0, "moment": [0, 1, 5], "fulli": [0, 11], "autom": [0, 9], "cardiotocographi": 0, "excel": 0, "file": [0, 7, 11, 12, 13, 14], "user": [0, 7, 8], "instal": [0, 5, 9, 12, 14], "xlrd": [0, 4], "modul": [0, 1, 5, 7, 8, 9, 10], "open": [0, 9, 13], "page": [0, 4, 9], "block": [0, 11], "need": [0, 5, 8, 11, 13, 14], "unix": 0, "compress": 0, "extens": [0, 2, 4, 7], "z": [0, 13], "directli": [0, 5], "doabl": 0, "packag": [0, 2, 4, 5, 9, 10], "like": [0, 1, 5, 7, 8, 11, 12, 13, 14], "gzip": 0, "zip": [0, 7, 11], "uncompress": 0, "o": [0, 11], "depend": [0, 6, 7, 11, 14], "softwar": 0, "manual": 0, "do": [0, 5, 6, 11, 12, 13, 14], "invok": [0, 5, 8, 11, 13], "provid": [0, 5, 7, 8, 9, 13, 14], "loader": [0, 13], "simpl": [0, 5, 7, 11, 14], "deal": 0, "t": [0, 1, 5, 11, 12, 14], "pre": [0, 5, 11], "n": [0, 8, 11, 12, 14], "second": [0, 1, 5, 7, 11, 13], "represent": [0, 5, 11, 12, 14], "col": [0, 13], "int": [0, 7, 11, 13, 14], "float": [0, 5, 11, 12, 13, 14], "charg": [0, 11, 13], "classmethod": [0, 11, 13, 14], "def": [0, 1, 5, 7, 11], "cl": 0, "path": [0, 5, 7, 11, 12, 13, 14], "str": [0, 11, 13, 14], "loader_func": [0, 13], "callabl": [0, 11, 13, 14], "defin": [0, 5, 8, 11, 12, 13, 14], "argument": [0, 1, 5, 7, 8, 11, 13, 14], "initi": [0, 12, 14], "particular": [0, 5, 14], "receiv": [0, 5, 7], "addition": 0, "number": [0, 1, 5, 6, 7, 8, 11, 12, 13, 14], "specifi": [0, 5, 7, 8, 11, 12, 13], "otherwis": [0, 5, 11, 13], "infer": [0, 13], "least": [0, 13], "pass": [0, 1, 7, 11, 12, 14], "along": [0, 1, 5, 11, 14], "train_path": [0, 13], "my_data": 0, "dat": [0, 12], "test_path": [0, 13], "my_custom_load": 0, "rb": 0, "fin": 0, "preprocess": [0, 5, 11, 14], "includ": [0, 2, 3, 5, 6, 7, 8, 9, 13, 14], "text2tfidf": [0, 5, 13], "tfidf": [0, 6, 7, 8, 13], "vector": [0, 5, 8, 11, 12, 13, 14], "reduce_column": [0, 13], "reduc": [0, 1, 13], "column": [0, 1, 11, 13], "base": [0, 5, 9, 11, 12], "term": [0, 5, 6, 7, 9, 11, 12, 13, 14], "frequenc": [0, 13, 14], "transform": [0, 12, 13, 14], "valu": [0, 1, 5, 6, 8, 11, 12, 13, 14], "score": [0, 1, 6, 11, 12, 13], "subtract": [0, 11, 13], "normal": [0, 1, 5, 11, 13, 14], "deviat": [0, 7, 8, 11, 13], "so": [0, 5, 7, 8, 11, 12, 13, 14], "zero": [0, 11], "unit": [0, 9, 11], "varianc": [0, 7], "textual": [0, 9, 13], "token": [0, 12, 13], "appeal": 1, "tool": [1, 9], "scenario": [1, 5, 6, 7, 9], "dataset": [1, 3, 5, 6, 7, 8, 9, 11, 12, 14], "shift": [1, 6, 8, 9, 11, 12, 14], "particularli": 1, "prior": [1, 5, 6, 7, 8, 9, 11, 14], "probabl": [1, 5, 6, 7, 8, 9, 11, 12, 14], "That": [1, 6], "interest": [1, 7, 8, 9, 11], "estim": [1, 5, 7, 9, 11, 12, 13, 14], "aris": 1, "under": [1, 8], "belief": 1, "those": [1, 5, 6, 7, 11, 12, 14], "might": [1, 11, 13], "ones": [1, 5, 7, 11, 13, 14], "observ": [1, 14], "dure": [1, 7, 14], "other": [1, 5, 7, 9, 11, 13, 14], "word": [1, 5, 9, 12, 13, 14], "simpli": [1, 2, 4, 5, 6, 7, 9, 11, 14], "predictor": 1, "assum": [1, 9, 14], "unlik": [1, 11], "machin": [1, 6, 9, 12], "learn": [1, 4, 5, 6, 9, 11, 12, 13, 14], "govern": 1, "iid": [1, 7, 9], "assumpt": [1, 7, 9], "brief": [1, 13], "dedic": [1, 13], "explain": [1, 7], "here": [1, 14], "mae": [1, 6, 8, 9, 11, 12, 14], "absolut": [1, 5, 7, 9, 11, 14], "mrae": [1, 9, 11, 12, 14], "rel": [1, 5, 11, 13, 14], "mse": [1, 5, 9, 11, 14], "squar": [1, 5, 11], "mkld": [1, 11, 14], "kullback": [1, 5, 11, 14], "leibler": [1, 5, 11, 14], "diverg": [1, 5, 11, 14], "mnkld": [1, 11, 14], "ae": [1, 2, 4, 5, 7, 11], "rae": [1, 2, 4, 5, 11], "se": [1, 11], "kld": [1, 2, 4, 5, 11, 12, 14], "nkld": [1, 2, 4, 5, 9, 11, 12, 14], "individu": [1, 5], "without": [1, 5, 11, 13], "averag": [1, 5, 11, 13, 14], "acc": [1, 5, 7, 8, 9, 11, 14], "accuraci": [1, 7, 11, 14], "f1e": [1, 11], "f1": [1, 11, 12], "true_prev": [1, 7, 11], "prevs_hat": [1, 11], "ndarrai": [1, 5, 11, 13, 14], "contain": [1, 2, 4, 5, 7, 8, 11, 12, 13, 14], "smooth": [1, 11], "stabil": [1, 14], "third": [1, 7], "ep": [1, 11], "none": [1, 6, 8, 11, 12, 13, 14], "paramet": [1, 5, 6, 8, 11, 12, 13, 14], "epsilon": [1, 11, 14], "tradition": 1, "2t": [1, 11], "past": 1, "either": [1, 5, 11, 14], "environ": [1, 5, 6, 7, 8, 11, 14], "variabl": [1, 5, 7, 11, 13], "onc": [1, 5, 6, 7, 8, 11, 13], "ommit": [], "thereaft": 1, "recommend": [1, 7, 14], "np": [1, 5, 6, 7, 8, 11, 13, 14], "asarrai": 1, "let": [1, 5, 6, 11, 14], "estim_prev": [1, 7, 11], "ae_": [], "3f": [1, 9], "200": [1, 12], "600": 1, "914": 1, "final": [1, 5, 7, 14], "possibl": [1, 5, 8, 11, 14], "string": [1, 11, 13, 14], "error_funct": 1, "from_nam": [1, 11], "accord": [5, 6, 11, 12, 13, 14], "fix": 8, "cover": [8, 11, 12], "full": [8, 11], "contrast": [], "natur": [9, 11], "despit": [], "introduc": [], "approxim": [5, 7, 11, 12], "preserv": [7, 11, 13], "procol": [], "equal": [8, 11, 14], "distant": [8, 11], "interv": [7, 8, 11], "n_prevpoint": [8, 11], "determin": [6, 7, 8, 11], "constrain": [7, 8, 11, 13], "obtain": [8, 11, 12, 14], "66": [8, 14], "given": [1, 5, 6, 8, 11, 12, 13, 14], "num_prevalence_combin": [8, 11], "21": [5, 7, 8, 11], "n_class": [5, 8, 11, 12, 13, 14], "n_repeat": [8, 11], "1771": 8, "note": [1, 5, 7, 8, 11, 13], "last": [5, 7, 8, 11, 12, 13], "typic": [1, 6, 7, 8, 11, 12, 13, 14], "singl": [1, 5, 8, 9, 11, 14], "higher": [7, 8], "comput": [1, 5, 7, 8, 11, 14], "perform": [1, 5, 6, 7, 8, 9, 11, 12, 14], "signific": 8, "instead": [1, 5, 6, 8, 11, 13, 14], "work": [5, 7, 8, 11, 13, 14], "wai": [5, 8, 14], "around": [8, 13, 14], "maximum": [8, 11, 12, 14], "budg": 8, "close": [8, 13], "than": [1, 6, 7, 8, 11, 12, 13], "budget": 8, "achiev": [5, 6, 7, 8], "get_nprevpoints_approxim": [8, 11], "5000": [1, 7, 8], "4960": 8, "cost": [], "sometim": 8, "cumbersom": 8, "control": [6, 8, 11], "overal": 11, "experi": [4, 5, 6, 7, 11, 13], "rather": 6, "By": [5, 11], "avoid": 11, "lead": 13, "closer": [], "surpass": [], "script": [2, 4, 5, 9, 14], "pacc": [5, 7, 11, 14], "reli": [5, 8, 11, 14], "logist": [5, 12, 14], "regressor": 5, "classifi": [6, 7, 9, 11, 12, 14], "variou": 7, "metric": [5, 6, 9, 11, 14], "sklearn": [5, 6, 7, 8, 9, 12, 13, 14], "linear_model": [5, 6, 8, 9, 12], "logisticregress": [5, 6, 8, 9, 12, 14], "data": [5, 6, 7, 9, 11, 12, 14], "min_df": [5, 6, 7, 8, 13, 14], "inplac": [5, 13, 14], "lr": [5, 12, 14], "aggreg": [1, 6, 7, 8, 9, 11], "fit": [5, 6, 7, 8, 9, 11, 12, 13, 14], "df": [], "artificial_sampling_report": [], "mani": [1, 5, 6, 7, 8, 9, 11, 14], "extract": [11, 13], "categori": 11, "n_repetit": [], "n_job": [5, 6, 8, 11, 12, 13, 14], "parallel": [5, 6, 11, 12, 13, 14], "worker": [11, 12, 13, 14], "cpu": [12, 14], "random_se": 11, "42": [], "random": [5, 7, 8, 11, 13], "seed": [8, 11, 13], "replic": [8, 11], "error_metr": [1, 6, 8, 11], "line": [5, 11], "result": [1, 2, 4, 5, 7, 9, 14], "report": [1, 11], "panda": [1, 4, 11], "datafram": [1, 11], "displai": [1, 7, 8, 11, 12], "just": [5, 8], "clearer": [], "shown": [7, 11], "convert": [5, 11, 12, 13, 14], "repres": [5, 7, 11, 13, 14], "decim": [], "default": [5, 8, 11, 12, 13, 14], "pd": 1, "set_opt": 1, "expand_frame_repr": 1, "fals": [1, 5, 7, 11, 12, 13, 14], "map": [1, 12, 14], "000": [], "000e": [], "091": 1, "909": 1, "009": [], "048": [], "426e": [], "04": [], "837": [], "037": [], "114": [], "633e": [], "03": [], "7": [5, 6, 7, 8, 9, 11, 12, 14], "717": [], "017": [], "041": [], "383e": [], "366": [], "634": [], "034": [], "070": [], "412e": [], "459": [], "541": [], "387e": [], "565": [], "435": [], "035": 1, "073": [], "535e": [], "654": [], "346": [], "046": [], "108": [], "701e": [], "725": [], "275": [], "075": [], "235": [], "515e": [], "02": [], "858": [], "142": [], "042": [], "229": [], "740e": [], "945": [], "055": [], "27": [5, 12], "357": [], "219e": [], "578": [], "dtype": [1, 13], "float64": 1, "artificial_sampling_ev": [], "artificial_sampling_predict": [], "arrai": [5, 7, 11, 12, 13, 14], "pip": 4, "older": 4, "version": [2, 4, 11, 12], "scikit": [4, 5, 6, 11, 12, 13, 14], "numpi": [4, 6, 8, 11, 12], "scipi": [4, 13], "pytorch": [4, 14], "quanet": [4, 9, 12, 14], "svmperf": [2, 3, 4, 5, 11, 14], "patch": [2, 4, 5, 12, 14], "joblib": [4, 14], "tqdm": 4, "matplotlib": [4, 11], "involv": [4, 7, 11], "you": [4, 5], "appli": [1, 2, 4, 5, 6, 7, 11, 12, 13, 14], "ext": [2, 4], "compil": [2, 4, 5], "sourc": [2, 4, 5, 9, 12], "prepare_svmperf": [2, 4, 5], "sh": [2, 4, 5], "job": [2, 4], "directori": [2, 4, 11, 12, 13, 14], "svm_perf_quantif": [2, 4, 5], "optim": [1, 2, 4, 6, 11, 12, 14], "measur": [2, 4, 5, 6, 7, 9, 11, 14], "propos": [2, 4, 5, 8, 14], "barranquero": [2, 4, 5, 12, 14], "extend": [2, 4, 5, 11, 14], "former": [4, 14], "categor": [5, 13], "belong": [5, 6, 14], "non": [5, 14], "group": 5, "though": [5, 11], "plan": 5, "add": [5, 6, 11, 13], "more": [1, 2, 5, 7, 8, 11, 14], "futur": 5, "character": [1, 5, 9], "fact": [5, 7], "product": [5, 13], "quantifi": [1, 5, 6, 7, 8, 9, 11, 13, 14], "shoud": 5, "basequantifi": [5, 11, 14], "abstract": [5, 11, 12, 13, 14], "abstractmethod": 5, "self": [5, 6, 11, 12, 13, 14], "set_param": [5, 11, 12, 14], "get_param": [5, 11, 12, 14], "deep": [5, 11, 14], "familiar": 5, "structur": [5, 14], "inspir": 5, "reason": [5, 7, 8, 9], "why": 5, "ha": [1, 5, 6, 7, 8, 11, 12, 13, 14], "adopt": [5, 6, 13], "respond": 5, "predict": [1, 5, 7, 11, 12, 14], "input": [5, 7, 11, 12, 13, 14], "element": [5, 11, 13, 14], "while": [5, 7, 12, 13, 14], "selector": 5, "process": [1, 6, 11], "hyperparamet": [5, 8, 11, 14], "search": [6, 9, 11, 14], "part": [5, 13], "aggregativequantifi": [1, 5, 14], "must": [5, 13, 14], "fit_learn": 5, "classif_predict": [5, 14], "mention": 5, "befor": [5, 11, 12, 13, 14], "inde": [5, 8], "alreadi": [1, 5, 11, 14], "preclassifi": [], "maintain": [5, 14], "through": [5, 11], "properti": [5, 11, 12, 13, 14], "learner": [5, 6, 12, 14], "extern": 5, "probabilist": [5, 11, 12, 14], "inherit": [5, 8, 11], "aggregativeprobabilisticquantifi": [5, 14], "posterior": [5, 11, 12, 14], "crisp": [1, 5, 11, 14], "decis": [5, 11, 12, 14], "hard": [5, 11, 12], "classif_posterior": 14, "posterior_prob": 14, "advantag": [5, 8, 14], "procedur": [1, 5, 9, 11], "veri": [5, 7, 11], "effici": 5, "everi": [1, 5, 6, 8, 11, 14], "leverag": 5, "speed": [1, 5, 11, 14], "up": [1, 5, 11, 12, 14], "over": [5, 6, 11], "customarili": [5, 6], "done": [5, 6], "four": 5, "cc": [5, 7, 14], "simplest": 5, "deliv": [5, 6, 14], "adjust": [5, 9, 11, 14], "pcc": [5, 7, 14], "soft": [1, 5], "serv": [5, 11, 13], "complet": [5, 7, 14], "equip": [5, 7], "svm": [2, 5, 7, 9, 12, 13, 14], "linearsvc": [5, 7, 13], "pickl": [5, 11, 13, 14], "alia": [5, 11, 13, 14], "classifyandcount": [5, 14], "estim_preval": [5, 9, 14], "rate": [5, 11, 12, 14], "binari": [5, 7, 9, 11, 12, 13, 14], "init": 5, "addit": [5, 11], "val_split": [5, 6, 12, 14], "integ": [5, 11, 12, 13, 14], "k": [5, 9, 11, 12, 13, 14], "fold": [5, 11, 13, 14], "cross": [5, 11, 12, 13, 14], "specif": [1, 5, 6, 8, 11], "held": [5, 6, 11, 12, 14], "out": [1, 5, 6, 7, 11, 12, 13, 14], "postpon": [1, 5], "constructor": 5, "prevail": 5, "overrid": 5, "illustr": [3, 5, 6, 7], "seem": 5, "calibr": [5, 11], "calibratedclassifiercv": 5, "base_estim": 5, "cv": [5, 6], "predict_proba": [5, 12, 14], "As": [5, 6], "calibratedclassifi": 5, "except": [5, 11, 14], "rais": [5, 11, 14], "lastli": 5, "everyth": 5, "said": 5, "aboud": 5, "sld": [5, 14], "expectationmaximizationquantifi": [5, 14], "describ": [5, 11, 14], "saeren": [5, 14], "m": [5, 11, 14], "latinn": [5, 14], "decaesteck": [5, 14], "c": [5, 6, 11, 12, 13, 14], "2002": 5, "priori": 5, "14": 5, "41": 5, "attempt": 5, "although": [5, 6, 7, 8, 14], "improv": [5, 11, 12, 14], "rank": [5, 12], "almost": 5, "alwai": [5, 7, 14], "among": 5, "effect": 5, "carri": [1, 5, 11, 13, 14], "gonz\u00e1lez": 5, "castro": 5, "v": [5, 11, 12, 14], "alaiz": 5, "rodr\u0131": 5, "guez": 5, "alegr": 5, "2013": 5, "scienc": 5, "218": 5, "146": 5, "It": [1, 5, 6, 7, 11], "allia": 5, "hellingerdistancei": [5, 14], "mixtur": [5, 11, 14], "previou": 5, "overridden": [5, 14], "proport": [5, 6, 12, 13, 14], "taken": [5, 11, 12, 13, 14], "itself": [5, 11, 14], "accept": 5, "elm": [2, 5, 14], "famili": [5, 14], "target": [5, 7, 9, 11, 12, 14], "orient": [2, 5, 9, 11, 14], "joachim": [5, 12, 14], "svmq": 5, "d\u00edez": 5, "reliabl": 5, "pattern": 5, "recognit": 5, "48": 5, "591": 5, "604": 5, "svmkld": [], "multivari": [5, 12], "transact": 5, "discoveri": 5, "articl": [5, 6], "svmnkld": [], "svmae": [], "error": [5, 6, 9, 10, 12, 14], "svmrae": [], "what": 5, "nowadai": 5, "consid": [5, 7, 8, 11, 12, 13, 14], "behav": [5, 7, 8], "If": [5, 7, 11, 13, 14], "want": [5, 6], "custom": [5, 8, 9, 11, 13], "modifi": [5, 11], "assign": [5, 13], "Then": 5, "re": [5, 6, 12, 13], "thing": [5, 8], "your": 5, "svmperf_hom": [5, 14], "valid_loss": [5, 12, 14], "mycustomloss": 5, "28": [1, 5, 13], "current": [5, 11, 12, 13, 14], "support": [5, 9, 13, 14], "oper": 5, "trivial": 5, "strategi": [5, 6], "2016": [5, 13, 14], "sentiment": [5, 9, 13], "19": [5, 13], "onevsal": [5, 14], "know": [5, 6], "where": [5, 7, 11, 12, 13, 14], "top": [5, 11, 14], "thu": [1, 5, 6, 7, 11, 12, 14], "nor": 5, "castano": [5, 13], "2019": [5, 13, 14], "dynam": [5, 12, 13, 14], "task": [5, 6, 9, 13], "45": [5, 7, 13], "15": [5, 11, 13], "polici": [5, 14], "processor": 5, "av": [5, 14], "ptr": [5, 14], "member": [5, 14], "d": [5, 14], "static": [5, 14], "red_siz": [5, 14], "pleas": 5, "check": [5, 11], "offer": [5, 9], "torch": [5, 12, 14], "embed": [5, 12, 14], "lstm": [5, 12, 14], "cnn": [5, 14], "its": [5, 6, 8, 11, 12, 14], "layer": [5, 12, 14], "neuralclassifiertrain": [5, 12, 14], "cnnnet": [5, 12, 14], "vocabulary_s": [5, 12, 13, 14], "cuda": [5, 12, 14], "supervis": [6, 9], "strongli": [6, 7], "good": [6, 7], "choic": [1, 6, 14], "hyper": [6, 11, 12], "wherebi": 6, "chosen": [1, 6, 11], "pick": 6, "best": [6, 11, 12, 14], "being": [1, 6, 8, 11, 14], "criteria": 6, "solv": [6, 14], "assess": 6, "own": 6, "right": [6, 11, 13], "impos": [6, 11], "aim": [6, 7], "appropri": 6, "configur": [6, 11], "design": 6, "long": [6, 12], "regard": 6, "next": [6, 11, 12, 13], "section": [6, 8], "argu": 6, "alejandro": 6, "fabrizio": 6, "count": [6, 7, 9, 11, 13, 14], "arxiv": [], "preprint": [], "2011": [], "02552": [], "2020": [5, 12], "varieti": 6, "exhibit": [6, 7, 8], "degre": 6, "model_select": [6, 8, 10, 14], "gridsearchq": [6, 8, 11, 14], "grid": [6, 8, 11, 14], "explor": [6, 11], "portion": [], "param_grid": [6, 8, 11, 14], "logspac": [6, 8, 14], "class_weight": [6, 7, 14], "eval_budget": [], "refit": [6, 11], "retrain": [6, 12], "goe": 6, "end": [6, 11, 14], "best_params_": 6, "best_model_": 6, "101": [], "5f": 6, "system": [1, 6, 14], "start": 6, "hyperparam": 6, "0001": 14, "got": [6, 14], "24987": [], "48135": [], "001": [6, 12, 14], "24866": [], "100000": [], "43676": [], "finish": [1, 6], "param": [6, 11, 12, 14], "19982": [], "develop": [6, 9], "1010": [], "5005": [], "54it": [], "20342": [], "altern": [1, 6], "computation": 6, "costli": 6, "try": 6, "theoret": 6, "suboptim": 6, "opt": 6, "gridsearchcv": [6, 14], "10000": [], "5379": [], "55it": [], "41734": [], "wors": [7, 11], "larg": 11, "between": [7, 9, 11, 12, 14], "modal": [], "turn": [], "better": [], "nonetheless": [], "happen": 7, "basic": [7, 14], "help": [1, 7, 14], "analys": [7, 9], "outcom": 7, "main": [3, 7, 8], "method_nam": [7, 11, 14], "name": [5, 7, 11, 12, 13, 14], "shape": [7, 11, 12, 13, 14], "correspond": [1, 7, 13], "matrix": [7, 11, 14], "appear": 7, "occur": [7, 13], "merg": 7, "emq": [7, 14], "55": 7, "showcas": 7, "wide": [1, 7, 8], "variant": [7, 9, 11, 14], "linear": [7, 11, 14], "review": [7, 9, 13], "step": [7, 11], "05": [7, 11, 14], "gen_data": 7, "base_classifi": 7, "yield": [7, 8, 11, 13, 14], "tr_prev": [7, 11, 14], "append": 7, "__class__": [], "__name__": [], "insight": 7, "view": 7, "y": [7, 11, 12, 13, 14], "axi": [7, 11], "against": [6, 7], "x": [1, 5, 7, 11, 12, 13, 14], "unfortun": 7, "limit": [7, 8, 11, 14], "binary_diagon": [7, 11], "train_prev": [7, 11], "savepath": [7, 11], "bin_diag": 7, "png": 7, "save": [7, 11], "pdf": [7, 14], "cyan": 7, "dot": [7, 11], "color": [7, 11], "band": [7, 11], "hidden": [7, 12, 14], "show_std": [7, 11], "unadjust": 7, "bias": 7, "toward": [7, 13], "seen": [7, 11, 14], "evinc": 7, "box": [7, 11], "binary_bias_glob": [7, 11], "bin_bia": 7, "unbias": 7, "center": 7, "tend": 7, "overestim": 7, "high": [7, 11], "lower": [7, 14], "again": [7, 11], "accordingli": 7, "20": [1, 7, 11, 14], "90": [7, 11], "rewrit": 7, "method_data": 7, "training_preval": 7, "linspac": 7, "training_s": 7, "suffic": 7, "latex": [], "syntax": [], "_": [7, 9, 11, 13], "now": [5, 7, 8], "clearli": 7, "binary_bias_bin": [7, 11], "broken": [7, 11], "down": [1, 7, 8, 11, 13], "bin": [6, 7, 11, 14], "To": [7, 13], "nbin": [6, 7, 11, 14], "isometr": [7, 11], "subinterv": 7, "interestingli": 7, "enough": 7, "seemingli": 7, "tendenc": 7, "low": [6, 7, 11, 12], "underestim": 7, "beyond": 7, "67": [7, 11], "curios": 7, "pretti": 7, "discuss": 7, "analyz": 7, "compar": [7, 11], "both": [7, 13], "irrespect": [1, 7, 14], "harder": 7, "interpret": [7, 9, 14], "error_by_drift": [7, 11], "error_nam": [7, 11], "n_bin": [7, 11, 14], "err_drift": 7, "whenev": [7, 11], "clear": 7, "lowest": 7, "difficult": 7, "rememb": 7, "solid": 7, "comparison": [7, 8], "detriment": 7, "visual": [1, 7, 9], "hide": 7, "framework": [5, 9, 14], "written": 9, "root": 9, "concept": [3, 9], "baselin": 9, "integr": 9, "commonli": [8, 9], "facilit": 9, "twitter": [9, 13], "true_preval": 9, "hold": [9, 11, 14], "endeavour": [9, 11], "popular": [8, 9], "expect": [8, 9, 14], "maxim": [9, 14], "hdy": [9, 14], "versatil": 9, "etc": [5, 9], "uci": [9, 13], "nativ": 9, "loss": [9, 12, 14], "perf": [2, 9, 12, 14], "ad": [8, 9], "meta": [9, 11], "plot": [3, 9, 10], "diagon": [9, 11], "bia": [5, 9, 11, 12, 14], "drift": 9, "api": [5, 9], "subpackag": 10, "submodul": 10, "util": [10, 12, 13], "content": 10, "bctscalibr": 12, "nbvscalibr": 12, "recalibratedprobabilisticclassifi": 12, "recalibratedprobabilisticclassifierbas": 12, "classes_": [12, 13, 14], "fit_cv": 12, "fit_tr_val": 12, "tscalibr": 12, "vscalibr": 12, "lowranklogisticregress": 12, "document_embed": 12, "lstmnet": 12, "reset_net_param": 12, "textclassifiernet": 12, "dimens": [11, 12, 13, 14], "forward": [12, 14], "xavier_uniform": 12, "torchdataset": 12, "asdataload": 12, "decision_funct": 12, "splitstratifi": 13, "stat": 13, "train_test": [5, 6, 7, 8, 13], "xp": 13, "xy": 13, "split_random": 13, "split_stratifi": [6, 8, 13], "uniform_sampl": 13, "uniform_sampling_index": 13, "fetch_lequa2022": 13, "warn": 13, "indextransform": 13, "add_word": 13, "fit_transform": 13, "reader": 11, "binar": [11, 13], "from_csv": 13, "from_spars": 13, "from_text": 13, "reindex_label": 13, "getptecondestim": 14, "solve_adjust": 14, "adjustedclassifyandcount": 14, "distributionmatch": [5, 6, 14], "dy": [5, 14], "em": 14, "max_it": 14, "explicitlossminimis": [], "max": [5, 14], "ms2": [5, 14], "mediansweep": 14, "mediansweep2": 14, "probabilisticadjustedclassifyandcount": 14, "probabilisticclassifyandcount": 14, "smm": [5, 14], "t50": [5, 14], "thresholdoptim": 14, "cross_generate_predict": 14, "cross_generate_predictions_depr": 14, "binaryquantifi": 14, "onevsallgener": [5, 14], "eacc": 14, "ecc": 14, "eemq": 14, "ehdi": 14, "epacc": 14, "valid_polici": 14, "ensemblefactori": 14, "get_probability_distribut": 14, "quanetmodul": 14, "quanettrain": 14, "clean_checkpoint": 14, "clean_checkpoint_dir": 14, "mae_loss": 14, "non_aggreg": 11, "maximumlikelihoodprevalenceestim": 14, "absolute_error": 11, "hat": 11, "frac": 11, "mathcal": 11, "sum_": 11, "acc_error": 11, "y_true": 11, "y_pred": 11, "tp": 11, "tn": 11, "fp": 11, "fn": 11, "stand": [5, 11, 14], "f1_error": 11, "macro": 11, "f_1": 11, "harmon": 11, "recal": 11, "2tp": 11, "independ": [11, 14], "err_nam": 11, "p_hat": 11, "d_": 11, "kl": 11, "log": [11, 13], "factor": 11, "beforehand": 11, "n_sampl": [11, 12], "mean_absolute_error": 11, "mean_relative_absolute_error": 11, "relative_absolute_error": 11, "underlin": 11, "displaystyl": 11, "abstractprotocol": [8, 11], "union": [11, 13, 14], "aggr_speedup": [1, 11], "auto": [1, 11], "evaluation_report": [1, 11], "app": [6, 7, 8, 11, 14], "repeat": [7, 8, 11], "smooth_limits_epsilon": 11, "random_st": [7, 8, 11, 13], "return_typ": [8, 11], "sample_prev": [8, 11], "abstractstochasticseededprotocol": [8, 11], "onlabelledcollectionprotocol": [1, 8, 11], "95": 11, "copi": [11, 13], "quantiti": 11, "labelled_collect": [8, 11], "prevalence_grid": 11, "exhaust": 11, "sum": [11, 14], "implicit": 11, "return_constrained_dim": 11, "rest": [11, 12, 13], "quit": 11, "obvious": 11, "determinist": 11, "anywher": 11, "multipli": 11, "necessari": 11, "samples_paramet": 11, "total": [8, 11], "parent": 11, "sequenc": [8, 11], "enforc": 11, "collat": 11, "arg": [11, 13], "domainmix": 11, "domaina": 11, "domainb": 11, "mixture_point": 11, "domain": 11, "scale": [5, 11, 12, 14], "npp": [8, 11], "draw": 11, "uniformli": [8, 11], "therefor": 11, "get_col": 11, "get_labelled_collect": 11, "on_preclassified_inst": 11, "pre_classif": 11, "in_plac": 11, "usimplexpp": [], "kraemer": [8, 11], "algorithm": [8, 11, 14], "sens": 11, "guarante": [8, 11, 13], "prefer": [1, 8, 11], "intract": 11, "hellingerdist": 11, "hellingh": 11, "distanc": [11, 14], "hd": [5, 11, 14], "discret": [11, 14], "sqrt": 11, "p_i": 11, "q_i": 11, "real": [11, 12, 13, 14], "topsoedist": 11, "1e": [11, 12, 14], "topso": [11, 14], "adjusted_quantif": 11, "prevalence_estim": 11, "tpr": [11, 14], "fpr": [11, 14], "clip": 11, "exce": 11, "check_prevalence_vector": 11, "raise_except": 11, "toleranz": 11, "08": 11, "combinations_budget": 11, "largest": 11, "dimension": [11, 12, 13, 14], "repetit": 11, "less": [11, 13], "normalize_preval": 11, "l1": [11, 14], "calcul": 11, "binom": 11, "mass": 11, "alloc": [11, 12], "solut": 11, "star": 11, "bar": 11, "prevalence_from_label": 11, "n_instanc": [11, 12, 14], "correctli": 11, "even": 11, "len": 11, "prevalence_from_prob": 11, "bool": [11, 12, 14], "argmax": 11, "prevalence_linspac": 11, "01": [6, 11, 12, 14], "separ": [11, 13], "99": 11, "uniform_prevalence_sampl": 11, "adapt": [11, 12], "post": 11, "http": [11, 13, 14], "stackexchang": 11, "com": 11, "question": 11, "3227": 11, "uniform": [9, 11, 13], "uniform_simplex_sampl": 11, "dict": [11, 13, 14], "timeout": 11, "dictionari": [11, 12, 13, 14], "kei": [11, 13], "quantification_error": 11, "whether": [11, 12, 13, 14], "ignor": [11, 13, 14], "gen": 11, "establish": 11, "timer": 11, "longer": [11, 14], "timeouterror": 11, "bound": [11, 14], "stdout": 11, "best_model": 11, "after": [11, 14], "minim": [11, 14], "routin": [11, 13, 14], "unus": [11, 12], "contanin": 11, "cross_val_predict": 11, "akin": [11, 14], "issu": 11, "reproduc": [11, 13], "pos_class": [11, 13], "titl": 11, "colormap": 11, "listedcolormap": 11, "vertical_xtick": 11, "legend": 11, "local": 11, "sign": 11, "minu": 11, "classs": 11, "compon": [11, 12, 14], "cm": 11, "tab10": 11, "secondari": 11, "global": 11, "method_ord": 11, "henc": [11, 13], "conveni": [1, 5, 8, 11], "multiclass": [5, 8, 11, 13, 14], "inconveni": 11, "leyend": 11, "hightlight": 11, "associ": 11, "brokenbar_supremacy_by_drift": 11, "isomer": 11, "x_error": 11, "y_error": 11, "ttest_alpha": 11, "005": 11, "tail_density_threshold": 11, "region": 11, "chart": 11, "condit": [8, 11, 14], "ii": 11, "significantli": 11, "side": 11, "confid": 11, "percentil": 11, "divid": 11, "amount": [1, 8, 11], "similar": [11, 14], "threshold": [11, 14], "densiti": 11, "tail": 11, "discard": 11, "outlier": 11, "show_dens": 11, "show_legend": 11, "logscal": 11, "vline": 11, "especi": 11, "mai": 11, "cumberson": 11, "gain": 11, "understand": 11, "fare": 11, "regim": 11, "highlight": 11, "vertic": 11, "earlystop": 11, "patienc": [11, 12, 14], "lower_is_bett": 11, "earli": [11, 12, 14], "stop": [11, 12, 14], "epoch": [11, 12, 14], "best_epoch": 11, "best_scor": 11, "consecut": [11, 12, 14], "monitor": 11, "obtaind": 11, "far": [11, 12, 13], "flag": 11, "keep": [11, 13], "track": 11, "boolean": [11, 13, 14], "create_if_not_exist": 11, "makedir": 11, "exist_ok": 11, "join": [11, 13], "dir": [11, 14], "subdir": 11, "anotherdir": 11, "create_parent_dir": 11, "exist": [8, 11], "txt": 11, "download_fil": 11, "url": 11, "archive_filenam": 11, "destin": 11, "filenam": 11, "download_file_if_not_exist": 11, "dowload": 11, "get_quapy_hom": 11, "home": [11, 13], "perman": 11, "map_parallel": 11, "func": 11, "slice": 11, "item": 11, "wrapper": [11, 12, 13, 14], "multiprocess": [11, 14], "delai": 11, "args_i": 11, "silent": [11, 14], "child": 11, "ensur": 11, "pickled_resourc": 11, "pickle_path": 11, "generation_func": 11, "fast": [11, 13], "resourc": 11, "some_arrai": 11, "mock": [11, 12], "rand": 11, "my_arrai": 11, "pkl": 11, "save_text_fil": 11, "disk": 11, "miss": 11, "temp_se": 11, "context": 11, "tempor": [11, 12], "outer": 11, "state": 11, "within": [11, 14], "get_njob": [], "correct": [5, 12, 14], "temperatur": [5, 12, 14], "bct": [12, 14], "abstent": 12, "alexandari": [5, 12, 14], "afterward": [12, 14], "No": [12, 14], "nbv": [12, 14], "baseestim": [5, 12, 14], "calibratorfactori": 12, "n_compon": 12, "kwarg": [12, 13, 14], "decomposit": 12, "truncatedsvd": 12, "princip": 12, "regress": 12, "n_featur": 12, "length": [12, 13], "eventu": [12, 13], "unalt": 12, "emb": 12, "embedding_s": 12, "hidden_s": 12, "repr_siz": 12, "kernel_height": 12, "stride": 12, "pad": [12, 13], "drop_p": 12, "convolut": 12, "vocabulari": [12, 13], "kernel": 12, "drop": 12, "dropout": [12, 14], "batch": 12, "dataload": 12, "tensor": 12, "n_dimens": 12, "lstm_class_nlay": 12, "short": 12, "memori": 12, "net": 12, "weight_decai": 12, "batch_siz": 12, "64": [6, 12, 14], "batch_size_test": 12, "512": [12, 14], "padding_length": 12, "checkpointpath": 12, "checkpoint": [12, 14], "classifier_net": 12, "weight": [12, 13], "decai": 12, "wait": 12, "enabl": 12, "gpu": [12, 14], "vocab_s": 12, "reiniti": 12, "trainer": 12, "disjoint": 12, "embed_s": 12, "nn": 12, "pad_length": 12, "xavier": 12, "shuffl": [12, 13], "longest": 12, "shorter": 12, "svmperf_bas": [12, 14], "classifiermixin": 12, "thorsten": 12, "refer": [12, 13], "svm_perf_learn": 12, "svm_perf_classifi": 12, "trade": [12, 14], "off": [12, 14], "margin": [12, 14], "std": 12, "qacc": 12, "qf1": 12, "qgm": 12, "12": 12, "26": 12, "23": [5, 12], "train_siz": 13, "conform": 13, "round": 13, "loader_kwarg": 13, "read": 13, "tupl": [8, 11, 13, 14], "tr": 13, "te": 13, "csr": 13, "csr_matrix": 13, "4403": 13, "my_collect": 13, "codefram": 13, "larger": [11, 13, 14], "actual": [13, 14], "empti": 13, "met": 13, "whose": [13, 14], "train_prop": [6, 8, 13], "left": [11, 13], "stratif": 13, "greater": 13, "dataset_nam": 13, "data_hom": 13, "test_split": 13, "predefin": 13, "uci_dataset": 13, "dump": 13, "leav": 13, "quay_data": 13, "ml": 13, "5fcvx2": 13, "x2": 13, "offici": 13, "lequa": [8, 9, 13], "competit": [9, 13], "t1a": 13, "t1b": 13, "t2a": 13, "t2b": 13, "raw": [11, 13], "merchandis": 13, "sperduti": 13, "2022": [8, 13], "overview": 13, "clef": 13, "lequa2022_experi": 13, "py": [5, 8, 13], "guid": 13, "val_gen": 13, "test_gen": 13, "samplesfromdir": 13, "minimun": 13, "kept": 13, "subsequ": 13, "mining6": 13, "devel": 13, "style": 13, "countvector": 13, "keyword": [13, 14], "nogap": 13, "regardless": 13, "codifi": 13, "unknown": 13, "surfac": 13, "assert": 13, "gap": 13, "preced": 13, "decid": [8, 11, 13], "uniqu": 13, "rare": 13, "unk": 13, "minimum": [13, 14], "occurr": 13, "org": [13, 14], "stabl": 13, "feature_extract": 13, "html": 13, "subtyp": 13, "spmatrix": 13, "remov": [13, 14], "infrequ": 13, "aka": [13, 14], "sublinear_tf": 13, "scall": 13, "counter": 13, "tfidfvector": 13, "whcih": 13, "had": 13, "encod": 13, "utf": 13, "csv": 13, "feat1": 13, "feat2": 13, "featn": 13, "covari": 13, "express": 13, "row": [1, 13], "class2int": 13, "collet": 13, "fomart": 13, "progress": 13, "sentenc": 13, "classnam": 13, "u1": 13, "misclassif": 14, "n_classes_": [], "fit_classifi": 14, "bypass": 14, "y_": 14, "ptecondestim": 14, "prevs_estim": 14, "ax": 14, "entri": [1, 14], "y_i": 14, "y_j": 14, "_posterior_probabilities_": 14, "attribut": 14, "subclass": 14, "give": [8, 14], "outsid": 14, "unless": 14, "noth": 14, "els": 14, "cdf": [5, 14], "match": [5, 14], "helling": 14, "sought": 14, "channel": 14, "proper": 14, "ch": 14, "di": 14, "dij": 14, "fraction": 14, "th": 14, "tol": 14, "ternari": 14, "dl": 14, "doi": 14, "1145": 14, "3219819": 14, "3220059": 14, "histogram": 14, "toler": 14, "explicit": 14, "exact_train_prev": [5, 14], "recalib": [5, 14], "updat": 14, "likelihood": [12, 14], "mutual": 14, "recurs": 14, "until": 14, "converg": 14, "suggest": [5, 14], "recalibr": 14, "reach": 14, "loop": 14, "cumul": 14, "unlabel": 14, "latter": 14, "forman": [5, 8, 14], "2006": [5, 14], "2008": [5, 14], "goal": 14, "bring": 14, "denomin": 14, "median": [5, 14], "sweep": [5, 14], "binary_quantifi": 14, "prevel": 14, "emploi": 14, "resp": 14, "subobject": 14, "nest": 14, "pipelin": 14, "__": 14, "simplif": 14, "2021": [5, 6, 14], "equival": 14, "cosest": 14, "heurist": [1, 14], "choos": [5, 14], "ground": 14, "complement": 14, "param_mod_sel": 14, "param_model_sel": 14, "min_po": 14, "max_sample_s": 14, "closest": 14, "preliminari": 14, "recomput": 14, "compat": 14, "l": 14, "base_quantifier_class": 14, "factori": 14, "common": 14, "doc_embedding_s": 14, "stats_siz": 14, "lstm_hidden_s": 14, "lstm_nlayer": 14, "ff_layer": 14, "1024": 14, "bidirect": 14, "qdrop_p": 14, "order_bi": 14, "cell": 14, "connect": 14, "ff": 14, "sort": 14, "doc_embed": 14, "doc_posterior": 14, "recip": 14, "care": 14, "regist": 14, "hook": 14, "n_epoch": 14, "tr_iter_per_poch": 14, "va_iter_per_poch": 14, "checkpointdir": 14, "checkpointnam": 14, "phase": 14, "anyth": 14, "truth": 14, "mlpe": 14, "lazi": 14, "put": 14, "assumpion": 14, "beat": [12, 14], "estimant": 14, "kundaj": 12, "shrikumar": 12, "novemb": 12, "232": 12, "pmlr": 12, "outpu": [], "partit": 12, "ight": [], "valueerror": 11, "attach": 13, "mix": [], "onevsallaggreg": [5, 14], "parallel_backend": 14, "loki": 14, "backend": 14, "cannot": 14, "temp": 14, "getonevsal": 5, "realiz": 11, "prepar": 11, "act": 11, "modif": 11, "place": [11, 13], "host_fold": 12, "tmp": 12, "delet": 12, "newelm": 14, "underli": [5, 6, 14], "newsvma": [5, 14], "newsvmkld": [5, 14], "newsvmq": [5, 14], "newsvmra": [5, 14], "newonevsal": 14, "onlabelledcollect": [], "forc": [1, 11], "deactiv": [1, 11], "evaluate_on_sampl": 11, "central": 11, "endow": 11, "never": [8, 11], "behaviour": [1, 5, 8, 11], "undertaken": 11, "artificialprevalenceprotocol": 11, "iterateprotocol": 11, "previous": 11, "naturalprevalenceprotocol": 11, "upp": [9, 11], "uniformprevalenceprotocol": 11, "n_train": 13, "n_test": 13, "quick": 13, "omit": 1, "procotol": 1, "vari": [1, 8], "u": 1, "prot": 1, "our": [1, 8], "evaluatio": 1, "4f": [1, 8], "often": 1, "account": 1, "rise": [1, 8], "straightforward": 1, "308": 1, "692": 1, "314": 1, "686": 1, "005649": 1, "013182": 1, "000074": 1, "896": 1, "013145": 1, "069323": 1, "000985": 1, "848": 1, "152": 1, "809": 1, "191": 1, "039063": 1, "149806": 1, "005175": 1, "016": 1, "984": 1, "033": 1, "967": 1, "017236": 1, "487529": 1, "005298": 1, "728": 1, "751": 1, "249": 1, "022769": 1, "057146": 1, "001350": 1, "4995": 1, "72": 1, "698": 1, "302": 1, "021752": 1, "053631": 1, "001133": 1, "4996": 1, "868": 1, "132": 1, "888": 1, "112": 1, "020490": 1, "088230": 1, "001985": 1, "4997": 1, "292": 1, "708": 1, "298": 1, "702": 1, "006149": 1, "014788": 1, "000090": 1, "4998": 1, "76": 1, "220": 1, "780": 1, "019950": 1, "054309": 1, "001127": 1, "4999": 1, "948": 1, "052": 1, "965": 1, "016941": 1, "165776": 1, "003538": 1, "023588": 1, "108779": 1, "003631": 1, "exit": 1, "smaller": 1, "1m": 1, "convers": 1, "precomput": 1, "execut": 1, "lot": 1, "welcom": 3, "behind": 3, "simplifi": 5, "remain": 5, "unchang": 5, "v0": [5, 8, 9], "construct": 5, "depart": 5, "approach": [5, 8], "firat": 5, "mutliclasshdi": 5, "maletzk": 5, "hassan": 5, "thank": 5, "pablo": 5, "contribut": 5, "newsvmnkld": 5, "experiment": 5, "plo": 5, "ONE": 5, "There": 5, "explicit_loss_minim": 5, "one_vs_al": 5, "robustli": 8, "presenc": 8, "confront": [6, 8], "stochast": 8, "fair": 8, "radom_st": 8, "technic": 8, "explan": 8, "custom_protocol": 8, "subject": 8, "2005": 8, "usag": 8, "classifier__c": [6, 8], "equial": 8, "val_app": 8, "increas": 8, "rapidli": 8, "becom": 8, "impract": 8, "legitim": 8, "drawback": 8, "elect": 8, "yet": 8, "burden": 8, "incur": 8, "idea": 8, "deprec": 8, "due": 8, "capabl": 8, "md": 2, "_new": 9, "adher": 11, "ecir": 6, "retriev": 6, "91": 6, "devot": 6, "mark": 6, "prefix": 6, "classifier__": 6, "16": 6, "mae_scor": 6, "04021": 6, "took": 6, "1356": 6, "04286": 6, "2139": 6, "04888": 6, "2491": 6, "05163": 6, "5372": 6, "02445": 6, "9056": 6, "02234": 6, "3114": 6, "03102": 6, "conceptu": 6, "flaw": 6, "hand": 6, "surrog": 6, "train_sampl": 7}, "objects": {"": [[11, 0, 0, "-", "quapy"]], "quapy": [[12, 0, 0, "-", "classification"], [13, 0, 0, "-", "data"], [11, 0, 0, "-", "error"], [11, 0, 0, "-", "evaluation"], [11, 0, 0, "-", "functional"], [14, 0, 0, "-", "method"], [11, 0, 0, "-", "model_selection"], [11, 0, 0, "-", "plot"], [11, 0, 0, "-", "protocol"], [11, 0, 0, "-", "util"]], "quapy.classification": [[12, 0, 0, "-", "calibration"], [12, 0, 0, "-", "methods"], [12, 0, 0, "-", "neural"], [12, 0, 0, "-", "svmperf"]], "quapy.classification.calibration": [[12, 1, 1, "", "BCTSCalibration"], [12, 1, 1, "", "NBVSCalibration"], [12, 1, 1, "", "RecalibratedProbabilisticClassifier"], [12, 1, 1, "", "RecalibratedProbabilisticClassifierBase"], [12, 1, 1, "", "TSCalibration"], [12, 1, 1, "", "VSCalibration"]], "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase": [[12, 2, 1, "", "classes_"], [12, 3, 1, "", "fit"], [12, 3, 1, "", "fit_cv"], [12, 3, 1, "", "fit_tr_val"], [12, 3, 1, "", "predict"], [12, 3, 1, "", "predict_proba"]], "quapy.classification.methods": [[12, 1, 1, "", "LowRankLogisticRegression"]], "quapy.classification.methods.LowRankLogisticRegression": [[12, 3, 1, "", "fit"], [12, 3, 1, "", "get_params"], [12, 3, 1, "", "predict"], [12, 3, 1, "", "predict_proba"], [12, 3, 1, "", "set_params"], [12, 3, 1, "", "transform"]], "quapy.classification.neural": [[12, 1, 1, "", "CNNnet"], [12, 1, 1, "", "LSTMnet"], [12, 1, 1, "", "NeuralClassifierTrainer"], [12, 1, 1, "", "TextClassifierNet"], [12, 1, 1, "", "TorchDataset"]], "quapy.classification.neural.CNNnet": [[12, 3, 1, "", "document_embedding"], [12, 3, 1, "", "get_params"], [12, 4, 1, "", "training"], [12, 2, 1, "", "vocabulary_size"]], "quapy.classification.neural.LSTMnet": [[12, 3, 1, "", "document_embedding"], [12, 3, 1, "", "get_params"], [12, 4, 1, "", "training"], [12, 2, 1, "", "vocabulary_size"]], "quapy.classification.neural.NeuralClassifierTrainer": [[12, 2, 1, "", "device"], [12, 3, 1, "", "fit"], [12, 3, 1, "", "get_params"], [12, 3, 1, "", "predict"], [12, 3, 1, "", "predict_proba"], [12, 3, 1, "", "reset_net_params"], [12, 3, 1, "", "set_params"], [12, 3, 1, "", "transform"]], "quapy.classification.neural.TextClassifierNet": [[12, 3, 1, "", "dimensions"], [12, 3, 1, "", "document_embedding"], [12, 3, 1, "", "forward"], [12, 3, 1, "", "get_params"], [12, 3, 1, "", "predict_proba"], [12, 4, 1, "", "training"], [12, 2, 1, "", "vocabulary_size"], [12, 3, 1, "", "xavier_uniform"]], "quapy.classification.neural.TorchDataset": [[12, 3, 1, "", "asDataloader"]], "quapy.classification.svmperf": [[12, 1, 1, "", "SVMperf"]], "quapy.classification.svmperf.SVMperf": [[12, 3, 1, "", "decision_function"], [12, 3, 1, "", "fit"], [12, 3, 1, "", "predict"], [12, 4, 1, "", "valid_losses"]], "quapy.data": [[13, 0, 0, "-", "base"], [13, 0, 0, "-", "datasets"], [13, 0, 0, "-", "preprocessing"], [13, 0, 0, "-", "reader"]], "quapy.data.base": [[13, 1, 1, "", "Dataset"], [13, 1, 1, "", "LabelledCollection"]], "quapy.data.base.Dataset": [[13, 3, 1, "", "SplitStratified"], [13, 2, 1, "", "binary"], [13, 2, 1, "", "classes_"], [13, 3, 1, "", "kFCV"], [13, 3, 1, "", "load"], [13, 2, 1, "", "n_classes"], [13, 3, 1, "", "reduce"], [13, 3, 1, "", "stats"], [13, 2, 1, "", "train_test"], [13, 2, 1, "", "vocabulary_size"]], "quapy.data.base.LabelledCollection": [[13, 2, 1, "", "X"], [13, 2, 1, "", "Xp"], [13, 2, 1, "", "Xy"], [13, 2, 1, "", "binary"], [13, 3, 1, "", "counts"], [13, 3, 1, "", "join"], [13, 3, 1, "", "kFCV"], [13, 3, 1, "", "load"], [13, 2, 1, "", "n_classes"], [13, 2, 1, "", "p"], [13, 3, 1, "", "prevalence"], [13, 3, 1, "", "sampling"], [13, 3, 1, "", "sampling_from_index"], [13, 3, 1, "", "sampling_index"], [13, 3, 1, "", "split_random"], [13, 3, 1, "", "split_stratified"], [13, 3, 1, "", "stats"], [13, 3, 1, "", "uniform_sampling"], [13, 3, 1, "", "uniform_sampling_index"], [13, 2, 1, "", "y"]], "quapy.data.datasets": [[13, 5, 1, "", "fetch_UCIDataset"], [13, 5, 1, "", "fetch_UCILabelledCollection"], [13, 5, 1, "", "fetch_lequa2022"], [13, 5, 1, "", "fetch_reviews"], [13, 5, 1, "", "fetch_twitter"], [13, 5, 1, "", "warn"]], "quapy.data.preprocessing": [[13, 1, 1, "", "IndexTransformer"], [13, 5, 1, "", "index"], [13, 5, 1, "", "reduce_columns"], [13, 5, 1, "", "standardize"], [13, 5, 1, "", "text2tfidf"]], "quapy.data.preprocessing.IndexTransformer": [[13, 3, 1, "", "add_word"], [13, 3, 1, "", "fit"], [13, 3, 1, "", "fit_transform"], [13, 3, 1, "", "transform"], [13, 3, 1, "", "vocabulary_size"]], "quapy.data.reader": [[13, 5, 1, "", "binarize"], [13, 5, 1, "", "from_csv"], [13, 5, 1, "", "from_sparse"], [13, 5, 1, "", "from_text"], [13, 5, 1, "", "reindex_labels"]], "quapy.error": [[11, 5, 1, "", "absolute_error"], [11, 5, 1, "", "acc_error"], [11, 5, 1, "", "acce"], [11, 5, 1, "", "ae"], [11, 5, 1, "", "f1_error"], [11, 5, 1, "", "f1e"], [11, 5, 1, "", "from_name"], [11, 5, 1, "", "kld"], [11, 5, 1, "", "mae"], [11, 5, 1, "", "mean_absolute_error"], [11, 5, 1, "", "mean_relative_absolute_error"], [11, 5, 1, "", "mkld"], [11, 5, 1, "", "mnkld"], [11, 5, 1, "", "mrae"], [11, 5, 1, "", "mse"], [11, 5, 1, "", "nkld"], [11, 5, 1, "", "rae"], [11, 5, 1, "", "relative_absolute_error"], [11, 5, 1, "", "se"], [11, 5, 1, "", "smooth"]], "quapy.evaluation": [[11, 5, 1, "", "evaluate"], [11, 5, 1, "", "evaluate_on_samples"], [11, 5, 1, "", "evaluation_report"], [11, 5, 1, "", "prediction"]], "quapy.functional": [[11, 5, 1, "", "HellingerDistance"], [11, 5, 1, "", "TopsoeDistance"], [11, 5, 1, "", "adjusted_quantification"], [11, 5, 1, "", "check_prevalence_vector"], [11, 5, 1, "", "get_nprevpoints_approximation"], [11, 5, 1, "", "normalize_prevalence"], [11, 5, 1, "", "num_prevalence_combinations"], [11, 5, 1, "", "prevalence_from_labels"], [11, 5, 1, "", "prevalence_from_probabilities"], [11, 5, 1, "", "prevalence_linspace"], [11, 5, 1, "", "strprev"], [11, 5, 1, "", "uniform_prevalence_sampling"], [11, 5, 1, "", "uniform_simplex_sampling"]], "quapy.method": [[14, 0, 0, "-", "aggregative"], [14, 0, 0, "-", "base"], [14, 0, 0, "-", "meta"], [14, 0, 0, "-", "neural"], [14, 0, 0, "-", "non_aggregative"]], "quapy.method.aggregative": [[14, 1, 1, "", "ACC"], [14, 4, 1, "", "AdjustedClassifyAndCount"], [14, 1, 1, "", "AggregativeProbabilisticQuantifier"], [14, 1, 1, "", "AggregativeQuantifier"], [14, 1, 1, "", "CC"], [14, 4, 1, "", "ClassifyAndCount"], [14, 1, 1, "", "DistributionMatching"], [14, 1, 1, "", "DyS"], [14, 1, 1, "", "EMQ"], [14, 4, 1, "", "ExpectationMaximizationQuantifier"], [14, 1, 1, "", "HDy"], [14, 4, 1, "", "HellingerDistanceY"], [14, 1, 1, "", "MAX"], [14, 1, 1, "", "MS"], [14, 1, 1, "", "MS2"], [14, 4, 1, "", "MedianSweep"], [14, 4, 1, "", "MedianSweep2"], [14, 1, 1, "", "OneVsAllAggregative"], [14, 1, 1, "", "PACC"], [14, 1, 1, "", "PCC"], [14, 4, 1, "", "ProbabilisticAdjustedClassifyAndCount"], [14, 4, 1, "", "ProbabilisticClassifyAndCount"], [14, 4, 1, "", "SLD"], [14, 1, 1, "", "SMM"], [14, 1, 1, "", "T50"], [14, 1, 1, "", "ThresholdOptimization"], [14, 1, 1, "", "X"], [14, 5, 1, "", "cross_generate_predictions"], [14, 5, 1, "", "cross_generate_predictions_depr"], [14, 5, 1, "", "newELM"], [14, 5, 1, "", "newSVMAE"], [14, 5, 1, "", "newSVMKLD"], [14, 5, 1, "", "newSVMQ"], [14, 5, 1, "", "newSVMRAE"]], "quapy.method.aggregative.ACC": [[14, 3, 1, "", "aggregate"], [14, 3, 1, "", "classify"], [14, 3, 1, "", "fit"], [14, 3, 1, "", "getPteCondEstim"], [14, 3, 1, "", "solve_adjustment"]], "quapy.method.aggregative.AggregativeProbabilisticQuantifier": [[14, 3, 1, "", "classify"]], "quapy.method.aggregative.AggregativeQuantifier": [[14, 3, 1, "", "aggregate"], [14, 2, 1, "", "classes_"], [14, 2, 1, "", "classifier"], [14, 3, 1, "", "classify"], [14, 3, 1, "", "fit"], [14, 3, 1, "", "quantify"]], "quapy.method.aggregative.CC": [[14, 3, 1, "", "aggregate"], [14, 3, 1, "", "fit"]], "quapy.method.aggregative.DistributionMatching": [[14, 3, 1, "", "aggregate"], [14, 3, 1, "", "fit"]], "quapy.method.aggregative.DyS": [[14, 3, 1, "", "aggregate"], [14, 3, 1, "", "fit"]], "quapy.method.aggregative.EMQ": [[14, 3, 1, "", "EM"], [14, 4, 1, "", "EPSILON"], [14, 4, 1, "", "MAX_ITER"], [14, 3, 1, "", "aggregate"], [14, 3, 1, "", "fit"], [14, 3, 1, "", "predict_proba"]], "quapy.method.aggregative.HDy": [[14, 3, 1, "", "aggregate"], [14, 3, 1, "", "fit"]], "quapy.method.aggregative.OneVsAllAggregative": [[14, 3, 1, "", "aggregate"], [14, 3, 1, "", "classify"]], "quapy.method.aggregative.PACC": [[14, 3, 1, "", "aggregate"], [14, 3, 1, "", "classify"], [14, 3, 1, "", "fit"], [14, 3, 1, "", "getPteCondEstim"]], "quapy.method.aggregative.PCC": [[14, 3, 1, "", "aggregate"], [14, 3, 1, "", "fit"]], "quapy.method.aggregative.SMM": [[14, 3, 1, "", "aggregate"], [14, 3, 1, "", "fit"]], "quapy.method.aggregative.ThresholdOptimization": [[14, 3, 1, "", "aggregate"], [14, 3, 1, "", "fit"]], "quapy.method.base": [[14, 1, 1, "", "BaseQuantifier"], [14, 1, 1, "", "BinaryQuantifier"], [14, 1, 1, "", "OneVsAll"], [14, 1, 1, "", "OneVsAllGeneric"], [14, 5, 1, "", "newOneVsAll"]], "quapy.method.base.BaseQuantifier": [[14, 3, 1, "", "fit"], [14, 3, 1, "", "quantify"]], "quapy.method.base.OneVsAllGeneric": [[14, 2, 1, "", "classes_"], [14, 3, 1, "", "fit"], [14, 3, 1, "", "quantify"]], "quapy.method.meta": [[14, 5, 1, "", "EACC"], [14, 5, 1, "", "ECC"], [14, 5, 1, "", "EEMQ"], [14, 5, 1, "", "EHDy"], [14, 5, 1, "", "EPACC"], [14, 1, 1, "", "Ensemble"], [14, 5, 1, "", "ensembleFactory"], [14, 5, 1, "", "get_probability_distribution"]], "quapy.method.meta.Ensemble": [[14, 4, 1, "", "VALID_POLICIES"], [14, 2, 1, "", "aggregative"], [14, 3, 1, "", "fit"], [14, 3, 1, "", "get_params"], [14, 2, 1, "", "probabilistic"], [14, 3, 1, "", "quantify"], [14, 3, 1, "", "set_params"]], "quapy.method.neural": [[14, 1, 1, "", "QuaNetModule"], [14, 1, 1, "", "QuaNetTrainer"], [14, 5, 1, "", "mae_loss"]], "quapy.method.neural.QuaNetModule": [[14, 2, 1, "", "device"], [14, 3, 1, "", "forward"], [14, 4, 1, "", "training"]], "quapy.method.neural.QuaNetTrainer": [[14, 2, 1, "", "classes_"], [14, 3, 1, "", "clean_checkpoint"], [14, 3, 1, "", "clean_checkpoint_dir"], [14, 3, 1, "", "fit"], [14, 3, 1, "", "get_params"], [14, 3, 1, "", "quantify"], [14, 3, 1, "", "set_params"]], "quapy.method.non_aggregative": [[14, 1, 1, "", "MaximumLikelihoodPrevalenceEstimation"]], "quapy.method.non_aggregative.MaximumLikelihoodPrevalenceEstimation": [[14, 3, 1, "", "fit"], [14, 3, 1, "", "quantify"]], "quapy.model_selection": [[11, 1, 1, "", "GridSearchQ"], [11, 5, 1, "", "cross_val_predict"]], "quapy.model_selection.GridSearchQ": [[11, 3, 1, "", "best_model"], [11, 3, 1, "", "fit"], [11, 3, 1, "", "get_params"], [11, 3, 1, "", "quantify"], [11, 3, 1, "", "set_params"]], "quapy.plot": [[11, 5, 1, "", "binary_bias_bins"], [11, 5, 1, "", "binary_bias_global"], [11, 5, 1, "", "binary_diagonal"], [11, 5, 1, "", "brokenbar_supremacy_by_drift"], [11, 5, 1, "", "error_by_drift"]], "quapy.protocol": [[11, 1, 1, "", "APP"], [11, 1, 1, "", "AbstractProtocol"], [11, 1, 1, "", "AbstractStochasticSeededProtocol"], [11, 4, 1, "", "ArtificialPrevalenceProtocol"], [11, 1, 1, "", "DomainMixer"], [11, 1, 1, "", "IterateProtocol"], [11, 1, 1, "", "NPP"], [11, 4, 1, "", "NaturalPrevalenceProtocol"], [11, 1, 1, "", "OnLabelledCollectionProtocol"], [11, 1, 1, "", "UPP"], [11, 4, 1, "", "UniformPrevalenceProtocol"]], "quapy.protocol.APP": [[11, 3, 1, "", "prevalence_grid"], [11, 3, 1, "", "sample"], [11, 3, 1, "", "samples_parameters"], [11, 3, 1, "", "total"]], "quapy.protocol.AbstractProtocol": [[11, 3, 1, "", "total"]], "quapy.protocol.AbstractStochasticSeededProtocol": [[11, 3, 1, "", "collator"], [11, 2, 1, "", "random_state"], [11, 3, 1, "", "sample"], [11, 3, 1, "", "samples_parameters"]], "quapy.protocol.DomainMixer": [[11, 3, 1, "", "sample"], [11, 3, 1, "", "samples_parameters"], [11, 3, 1, "", "total"]], "quapy.protocol.IterateProtocol": [[11, 3, 1, "", "total"]], "quapy.protocol.NPP": [[11, 3, 1, "", "sample"], [11, 3, 1, "", "samples_parameters"], [11, 3, 1, "", "total"]], "quapy.protocol.OnLabelledCollectionProtocol": [[11, 4, 1, "", "RETURN_TYPES"], [11, 3, 1, "", "get_collator"], [11, 3, 1, "", "get_labelled_collection"], [11, 3, 1, "", "on_preclassified_instances"]], "quapy.protocol.UPP": [[11, 3, 1, "", "sample"], [11, 3, 1, "", "samples_parameters"], [11, 3, 1, "", "total"]], "quapy.util": [[11, 1, 1, "", "EarlyStop"], [11, 5, 1, "", "create_if_not_exist"], [11, 5, 1, "", "create_parent_dir"], [11, 5, 1, "", "download_file"], [11, 5, 1, "", "download_file_if_not_exists"], [11, 5, 1, "", "get_quapy_home"], [11, 5, 1, "", "map_parallel"], [11, 5, 1, "", "parallel"], [11, 5, 1, "", "pickled_resource"], [11, 5, 1, "", "save_text_file"], [11, 5, 1, "", "temp_seed"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"dataset": [0, 13], "review": 0, "twitter": 0, "sentiment": 0, "uci": 0, "machin": 0, "learn": 0, "issu": 0, "ad": 0, "custom": 0, "data": [0, 13], "process": 0, "evalu": [1, 11], "error": [1, 7, 11], "measur": 1, "protocol": [1, 8, 11], "instal": 4, "requir": 4, "svm": 4, "perf": 4, "quantif": [4, 5, 6, 7], "orient": [4, 6], "loss": [2, 4, 5, 6], "method": [5, 12, 14], "aggreg": [5, 14], "The": 5, "classifi": 5, "count": 5, "variant": 5, "expect": 5, "maxim": 5, "emq": 5, "helling": 5, "distanc": 5, "y": 5, "hdy": 5, "explicit": [2, 5], "minim": [2, 5], "meta": [5, 14], "model": [5, 6], "ensembl": 5, "quanet": 5, "neural": [5, 12, 14], "network": 5, "select": 6, "target": 6, "classif": [6, 12], "plot": [7, 11], "diagon": 7, "bia": 7, "drift": 7, "welcom": 9, "quapi": [9, 10, 11, 12, 13, 14], "": 9, "document": 9, "introduct": 9, "A": 9, "quick": 9, "exampl": 9, "featur": 9, "content": [9, 11, 12, 13, 14], "indic": 9, "tabl": 9, "packag": [11, 12, 13, 14], "subpackag": 11, "submodul": [11, 12, 13, 14], "function": 11, "model_select": 11, "util": 11, "modul": [11, 12, 13, 14], "calibr": 12, "svmperf": 12, "base": [13, 14], "preprocess": 13, "reader": 13, "non_aggreg": 14, "threshold": 5, "optim": 5, "artifici": 8, "preval": 8, "sampl": 8, "from": 8, "unit": 8, "simplex": 8, "uniform": 8, "upp": 8, "natur": 8, "other": 8}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Installation": [[4, "installation"]], "Requirements": [[4, "requirements"]], "SVM-perf with quantification-oriented losses": [[4, "svm-perf-with-quantification-oriented-losses"]], "quapy": [[10, "quapy"]], "Welcome to QuaPy\u2019s documentation!": [[9, "welcome-to-quapy-s-documentation"]], "Introduction": [[9, "introduction"]], "A quick example:": [[9, "a-quick-example"]], "Features": [[9, "features"]], "Contents:": [[9, null]], "Indices and tables": [[9, "indices-and-tables"]], "Datasets": [[0, "datasets"]], "Reviews Datasets": [[0, "reviews-datasets"]], "Twitter Sentiment Datasets": [[0, "twitter-sentiment-datasets"]], "UCI Machine Learning": [[0, "uci-machine-learning"]], "Issues:": [[0, "issues"]], "Adding Custom Datasets": [[0, "adding-custom-datasets"]], "Data Processing": [[0, "data-processing"]], "Evaluation": [[1, "evaluation"]], "Error Measures": [[1, "error-measures"]], "Evaluation Protocols": [[1, "evaluation-protocols"]], "Explicit Loss Minimization": [[2, "explicit-loss-minimization"], [5, "explicit-loss-minimization"]], "Quantification Methods": [[5, "quantification-methods"]], "Aggregative Methods": [[5, "aggregative-methods"]], "The Classify & Count variants": [[5, "the-classify-count-variants"]], "Expectation Maximization (EMQ)": [[5, "expectation-maximization-emq"]], "Hellinger Distance y (HDy)": [[5, "hellinger-distance-y-hdy"]], "Threshold Optimization methods": [[5, "threshold-optimization-methods"]], "Meta Models": [[5, "meta-models"]], "Ensembles": [[5, "ensembles"]], "The QuaNet neural network": [[5, "the-quanet-neural-network"]], "Model Selection": [[6, "model-selection"]], "Targeting a Quantification-oriented loss": [[6, "targeting-a-quantification-oriented-loss"]], "Targeting a Classification-oriented loss": [[6, "targeting-a-classification-oriented-loss"]], "Plotting": [[7, "plotting"]], "Diagonal Plot": [[7, "diagonal-plot"]], "Quantification bias": [[7, "quantification-bias"]], "Error by Drift": [[7, "error-by-drift"]], "Protocols": [[8, "protocols"]], "Artificial-Prevalence Protocol": [[8, "artificial-prevalence-protocol"]], "Sampling from the unit-simplex, the Uniform-Prevalence Protocol (UPP)": [[8, "sampling-from-the-unit-simplex-the-uniform-prevalence-protocol-upp"]], "Natural-Prevalence Protocol": [[8, "natural-prevalence-protocol"]], "Other protocols": [[8, "other-protocols"]], "quapy package": [[11, "quapy-package"]], "Submodules": [[11, "submodules"], [12, "submodules"], [13, "submodules"], [14, "submodules"]], "quapy.error": [[11, "module-quapy.error"]], "quapy.evaluation": [[11, "module-quapy.evaluation"]], "quapy.protocol": [[11, "quapy-protocol"]], "quapy.functional": [[11, "module-quapy.functional"]], "quapy.model_selection": [[11, "module-quapy.model_selection"]], "quapy.plot": [[11, "module-quapy.plot"]], "quapy.util": [[11, "module-quapy.util"]], "Subpackages": [[11, "subpackages"]], "Module contents": [[11, "module-quapy"], [12, "module-quapy.classification"], [13, "module-quapy.data"], [14, "module-quapy.method"]], "quapy.classification package": [[12, "quapy-classification-package"]], "quapy.classification.calibration": [[12, "quapy-classification-calibration"]], "quapy.classification.methods": [[12, "module-quapy.classification.methods"]], "quapy.classification.neural": [[12, "module-quapy.classification.neural"]], "quapy.classification.svmperf": [[12, "module-quapy.classification.svmperf"]], "quapy.data package": [[13, "quapy-data-package"]], "quapy.data.base": [[13, "module-quapy.data.base"]], "quapy.data.datasets": [[13, "module-quapy.data.datasets"]], "quapy.data.preprocessing": [[13, "module-quapy.data.preprocessing"]], "quapy.data.reader": [[13, "module-quapy.data.reader"]], "quapy.method package": [[14, "quapy-method-package"]], "quapy.method.aggregative": [[14, "module-quapy.method.aggregative"]], "quapy.method.base": [[14, "module-quapy.method.base"]], "quapy.method.meta": [[14, "module-quapy.method.meta"]], "quapy.method.neural": [[14, "module-quapy.method.neural"]], "quapy.method.non_aggregative": [[14, "module-quapy.method.non_aggregative"]]}, "indexentries": {"app (class in quapy.protocol)": [[11, "quapy.protocol.APP"]], "abstractprotocol (class in quapy.protocol)": [[11, "quapy.protocol.AbstractProtocol"]], "abstractstochasticseededprotocol (class in quapy.protocol)": [[11, "quapy.protocol.AbstractStochasticSeededProtocol"]], "artificialprevalenceprotocol (in module quapy.protocol)": [[11, "quapy.protocol.ArtificialPrevalenceProtocol"]], "domainmixer (class in quapy.protocol)": [[11, "quapy.protocol.DomainMixer"]], "earlystop (class in quapy.util)": [[11, "quapy.util.EarlyStop"]], "gridsearchq (class in quapy.model_selection)": [[11, "quapy.model_selection.GridSearchQ"]], "hellingerdistance() (in module quapy.functional)": [[11, "quapy.functional.HellingerDistance"]], "iterateprotocol (class in quapy.protocol)": [[11, "quapy.protocol.IterateProtocol"]], "npp (class in quapy.protocol)": [[11, "quapy.protocol.NPP"]], "naturalprevalenceprotocol (in module quapy.protocol)": [[11, "quapy.protocol.NaturalPrevalenceProtocol"]], "onlabelledcollectionprotocol (class in quapy.protocol)": [[11, "quapy.protocol.OnLabelledCollectionProtocol"]], "return_types (quapy.protocol.onlabelledcollectionprotocol attribute)": [[11, "quapy.protocol.OnLabelledCollectionProtocol.RETURN_TYPES"]], "topsoedistance() (in module quapy.functional)": [[11, "quapy.functional.TopsoeDistance"]], "upp (class in quapy.protocol)": [[11, "quapy.protocol.UPP"]], "uniformprevalenceprotocol (in module quapy.protocol)": [[11, "quapy.protocol.UniformPrevalenceProtocol"]], "absolute_error() (in module quapy.error)": [[11, "quapy.error.absolute_error"]], "acc_error() (in module quapy.error)": [[11, "quapy.error.acc_error"]], "acce() (in module quapy.error)": [[11, "quapy.error.acce"]], "adjusted_quantification() (in module quapy.functional)": [[11, "quapy.functional.adjusted_quantification"]], "ae() (in module quapy.error)": [[11, "quapy.error.ae"]], "best_model() (quapy.model_selection.gridsearchq method)": [[11, "quapy.model_selection.GridSearchQ.best_model"]], "binary_bias_bins() (in module quapy.plot)": [[11, "quapy.plot.binary_bias_bins"]], "binary_bias_global() (in module quapy.plot)": [[11, "quapy.plot.binary_bias_global"]], "binary_diagonal() (in module quapy.plot)": [[11, "quapy.plot.binary_diagonal"]], "brokenbar_supremacy_by_drift() (in module quapy.plot)": [[11, "quapy.plot.brokenbar_supremacy_by_drift"]], "check_prevalence_vector() (in module quapy.functional)": [[11, "quapy.functional.check_prevalence_vector"]], "collator() (quapy.protocol.abstractstochasticseededprotocol method)": [[11, "quapy.protocol.AbstractStochasticSeededProtocol.collator"]], "create_if_not_exist() (in module quapy.util)": [[11, "quapy.util.create_if_not_exist"]], "create_parent_dir() (in module quapy.util)": [[11, "quapy.util.create_parent_dir"]], "cross_val_predict() (in module quapy.model_selection)": [[11, "quapy.model_selection.cross_val_predict"]], "download_file() (in module quapy.util)": [[11, "quapy.util.download_file"]], "download_file_if_not_exists() (in module quapy.util)": [[11, "quapy.util.download_file_if_not_exists"]], "error_by_drift() (in module quapy.plot)": [[11, "quapy.plot.error_by_drift"]], "evaluate() (in module quapy.evaluation)": [[11, "quapy.evaluation.evaluate"]], "evaluate_on_samples() (in module quapy.evaluation)": [[11, "quapy.evaluation.evaluate_on_samples"]], "evaluation_report() (in module quapy.evaluation)": [[11, "quapy.evaluation.evaluation_report"]], "f1_error() (in module quapy.error)": [[11, "quapy.error.f1_error"]], "f1e() (in module quapy.error)": [[11, "quapy.error.f1e"]], "fit() (quapy.model_selection.gridsearchq method)": [[11, "quapy.model_selection.GridSearchQ.fit"]], "from_name() (in module quapy.error)": [[11, "quapy.error.from_name"]], "get_collator() (quapy.protocol.onlabelledcollectionprotocol class method)": [[11, "quapy.protocol.OnLabelledCollectionProtocol.get_collator"]], "get_labelled_collection() (quapy.protocol.onlabelledcollectionprotocol method)": [[11, "quapy.protocol.OnLabelledCollectionProtocol.get_labelled_collection"]], "get_nprevpoints_approximation() (in module quapy.functional)": [[11, "quapy.functional.get_nprevpoints_approximation"]], "get_params() (quapy.model_selection.gridsearchq method)": [[11, "quapy.model_selection.GridSearchQ.get_params"]], "get_quapy_home() (in module quapy.util)": [[11, "quapy.util.get_quapy_home"]], "kld() (in module quapy.error)": [[11, "quapy.error.kld"]], "mae() (in module quapy.error)": [[11, "quapy.error.mae"]], "map_parallel() (in module quapy.util)": [[11, "quapy.util.map_parallel"]], "mean_absolute_error() (in module quapy.error)": [[11, "quapy.error.mean_absolute_error"]], "mean_relative_absolute_error() (in module quapy.error)": [[11, "quapy.error.mean_relative_absolute_error"]], "mkld() (in module quapy.error)": [[11, "quapy.error.mkld"]], "mnkld() (in module quapy.error)": [[11, "quapy.error.mnkld"]], "module": [[11, "module-quapy"], [11, "module-quapy.error"], [11, "module-quapy.evaluation"], [11, "module-quapy.functional"], [11, "module-quapy.model_selection"], [11, "module-quapy.plot"], [11, "module-quapy.protocol"], [11, "module-quapy.util"], [12, "module-quapy.classification"], [12, "module-quapy.classification.calibration"], [12, "module-quapy.classification.methods"], [12, "module-quapy.classification.neural"], [12, "module-quapy.classification.svmperf"], [13, "module-quapy.data"], [13, "module-quapy.data.base"], [13, "module-quapy.data.datasets"], [13, "module-quapy.data.preprocessing"], [13, "module-quapy.data.reader"], [14, "module-quapy.method"], [14, "module-quapy.method.aggregative"], [14, "module-quapy.method.base"], [14, "module-quapy.method.meta"], [14, "module-quapy.method.neural"], [14, "module-quapy.method.non_aggregative"]], "mrae() (in module quapy.error)": [[11, "quapy.error.mrae"]], "mse() (in module quapy.error)": [[11, "quapy.error.mse"]], "nkld() (in module quapy.error)": [[11, "quapy.error.nkld"]], "normalize_prevalence() (in module quapy.functional)": [[11, "quapy.functional.normalize_prevalence"]], "num_prevalence_combinations() (in module quapy.functional)": [[11, "quapy.functional.num_prevalence_combinations"]], "on_preclassified_instances() (quapy.protocol.onlabelledcollectionprotocol method)": [[11, "quapy.protocol.OnLabelledCollectionProtocol.on_preclassified_instances"]], "parallel() (in module quapy.util)": [[11, "quapy.util.parallel"]], "pickled_resource() (in module quapy.util)": [[11, "quapy.util.pickled_resource"]], "prediction() (in module quapy.evaluation)": [[11, "quapy.evaluation.prediction"]], "prevalence_from_labels() (in module quapy.functional)": [[11, "quapy.functional.prevalence_from_labels"]], "prevalence_from_probabilities() (in module quapy.functional)": [[11, "quapy.functional.prevalence_from_probabilities"]], "prevalence_grid() (quapy.protocol.app method)": [[11, "quapy.protocol.APP.prevalence_grid"]], "prevalence_linspace() (in module quapy.functional)": [[11, "quapy.functional.prevalence_linspace"]], "quantify() (quapy.model_selection.gridsearchq method)": [[11, "quapy.model_selection.GridSearchQ.quantify"]], "quapy": [[11, "module-quapy"]], "quapy.error": [[11, "module-quapy.error"]], "quapy.evaluation": [[11, "module-quapy.evaluation"]], "quapy.functional": [[11, "module-quapy.functional"]], "quapy.model_selection": [[11, "module-quapy.model_selection"]], "quapy.plot": [[11, "module-quapy.plot"]], "quapy.protocol": [[11, "module-quapy.protocol"]], "quapy.util": [[11, "module-quapy.util"]], "rae() (in module quapy.error)": [[11, "quapy.error.rae"]], "random_state (quapy.protocol.abstractstochasticseededprotocol property)": [[11, "quapy.protocol.AbstractStochasticSeededProtocol.random_state"]], "relative_absolute_error() (in module quapy.error)": [[11, "quapy.error.relative_absolute_error"]], "sample() (quapy.protocol.app method)": [[11, "quapy.protocol.APP.sample"]], "sample() (quapy.protocol.abstractstochasticseededprotocol method)": [[11, "quapy.protocol.AbstractStochasticSeededProtocol.sample"]], "sample() (quapy.protocol.domainmixer method)": [[11, "quapy.protocol.DomainMixer.sample"]], "sample() (quapy.protocol.npp method)": [[11, "quapy.protocol.NPP.sample"]], "sample() (quapy.protocol.upp method)": [[11, "quapy.protocol.UPP.sample"]], "samples_parameters() (quapy.protocol.app method)": [[11, "quapy.protocol.APP.samples_parameters"]], "samples_parameters() (quapy.protocol.abstractstochasticseededprotocol method)": [[11, "quapy.protocol.AbstractStochasticSeededProtocol.samples_parameters"]], "samples_parameters() (quapy.protocol.domainmixer method)": [[11, "quapy.protocol.DomainMixer.samples_parameters"]], "samples_parameters() (quapy.protocol.npp method)": [[11, "quapy.protocol.NPP.samples_parameters"]], "samples_parameters() (quapy.protocol.upp method)": [[11, "quapy.protocol.UPP.samples_parameters"]], "save_text_file() (in module quapy.util)": [[11, "quapy.util.save_text_file"]], "se() (in module quapy.error)": [[11, "quapy.error.se"]], "set_params() (quapy.model_selection.gridsearchq method)": [[11, "quapy.model_selection.GridSearchQ.set_params"]], "smooth() (in module quapy.error)": [[11, "quapy.error.smooth"]], "strprev() (in module quapy.functional)": [[11, "quapy.functional.strprev"]], "temp_seed() (in module quapy.util)": [[11, "quapy.util.temp_seed"]], "total() (quapy.protocol.app method)": [[11, "quapy.protocol.APP.total"]], "total() (quapy.protocol.abstractprotocol method)": [[11, "quapy.protocol.AbstractProtocol.total"]], "total() (quapy.protocol.domainmixer method)": [[11, "quapy.protocol.DomainMixer.total"]], "total() (quapy.protocol.iterateprotocol method)": [[11, "quapy.protocol.IterateProtocol.total"]], "total() (quapy.protocol.npp method)": [[11, "quapy.protocol.NPP.total"]], "total() (quapy.protocol.upp method)": [[11, "quapy.protocol.UPP.total"]], "uniform_prevalence_sampling() (in module quapy.functional)": [[11, "quapy.functional.uniform_prevalence_sampling"]], "uniform_simplex_sampling() (in module quapy.functional)": [[11, "quapy.functional.uniform_simplex_sampling"]], "bctscalibration (class in quapy.classification.calibration)": [[12, "quapy.classification.calibration.BCTSCalibration"]], "cnnnet (class in quapy.classification.neural)": [[12, "quapy.classification.neural.CNNnet"]], "lstmnet (class in quapy.classification.neural)": [[12, "quapy.classification.neural.LSTMnet"]], "lowranklogisticregression (class in quapy.classification.methods)": [[12, "quapy.classification.methods.LowRankLogisticRegression"]], "nbvscalibration (class in quapy.classification.calibration)": [[12, "quapy.classification.calibration.NBVSCalibration"]], "neuralclassifiertrainer (class in quapy.classification.neural)": [[12, "quapy.classification.neural.NeuralClassifierTrainer"]], "recalibratedprobabilisticclassifier (class in quapy.classification.calibration)": [[12, "quapy.classification.calibration.RecalibratedProbabilisticClassifier"]], "recalibratedprobabilisticclassifierbase (class in quapy.classification.calibration)": [[12, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase"]], "svmperf (class in quapy.classification.svmperf)": [[12, "quapy.classification.svmperf.SVMperf"]], "tscalibration (class in quapy.classification.calibration)": [[12, "quapy.classification.calibration.TSCalibration"]], "textclassifiernet (class in quapy.classification.neural)": [[12, "quapy.classification.neural.TextClassifierNet"]], "torchdataset (class in quapy.classification.neural)": [[12, "quapy.classification.neural.TorchDataset"]], "vscalibration (class in quapy.classification.calibration)": [[12, "quapy.classification.calibration.VSCalibration"]], "asdataloader() (quapy.classification.neural.torchdataset method)": [[12, "quapy.classification.neural.TorchDataset.asDataloader"]], "classes_ (quapy.classification.calibration.recalibratedprobabilisticclassifierbase property)": [[12, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase.classes_"]], "decision_function() (quapy.classification.svmperf.svmperf method)": [[12, "quapy.classification.svmperf.SVMperf.decision_function"]], "device (quapy.classification.neural.neuralclassifiertrainer property)": [[12, "quapy.classification.neural.NeuralClassifierTrainer.device"]], "dimensions() (quapy.classification.neural.textclassifiernet method)": [[12, "quapy.classification.neural.TextClassifierNet.dimensions"]], "document_embedding() (quapy.classification.neural.cnnnet method)": [[12, "quapy.classification.neural.CNNnet.document_embedding"]], "document_embedding() (quapy.classification.neural.lstmnet method)": [[12, "quapy.classification.neural.LSTMnet.document_embedding"]], "document_embedding() (quapy.classification.neural.textclassifiernet method)": [[12, "quapy.classification.neural.TextClassifierNet.document_embedding"]], "fit() (quapy.classification.calibration.recalibratedprobabilisticclassifierbase method)": [[12, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase.fit"]], "fit() (quapy.classification.methods.lowranklogisticregression method)": [[12, "quapy.classification.methods.LowRankLogisticRegression.fit"]], "fit() (quapy.classification.neural.neuralclassifiertrainer method)": [[12, "quapy.classification.neural.NeuralClassifierTrainer.fit"]], "fit() (quapy.classification.svmperf.svmperf method)": [[12, "quapy.classification.svmperf.SVMperf.fit"]], "fit_cv() (quapy.classification.calibration.recalibratedprobabilisticclassifierbase method)": [[12, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase.fit_cv"]], "fit_tr_val() (quapy.classification.calibration.recalibratedprobabilisticclassifierbase method)": [[12, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase.fit_tr_val"]], "forward() (quapy.classification.neural.textclassifiernet method)": [[12, "quapy.classification.neural.TextClassifierNet.forward"]], "get_params() (quapy.classification.methods.lowranklogisticregression method)": [[12, "quapy.classification.methods.LowRankLogisticRegression.get_params"]], "get_params() (quapy.classification.neural.cnnnet method)": [[12, "quapy.classification.neural.CNNnet.get_params"]], "get_params() (quapy.classification.neural.lstmnet method)": [[12, "quapy.classification.neural.LSTMnet.get_params"]], "get_params() (quapy.classification.neural.neuralclassifiertrainer method)": [[12, "quapy.classification.neural.NeuralClassifierTrainer.get_params"]], "get_params() (quapy.classification.neural.textclassifiernet method)": [[12, "quapy.classification.neural.TextClassifierNet.get_params"]], "predict() (quapy.classification.calibration.recalibratedprobabilisticclassifierbase method)": [[12, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase.predict"]], "predict() (quapy.classification.methods.lowranklogisticregression method)": [[12, "quapy.classification.methods.LowRankLogisticRegression.predict"]], "predict() (quapy.classification.neural.neuralclassifiertrainer method)": [[12, "quapy.classification.neural.NeuralClassifierTrainer.predict"]], "predict() (quapy.classification.svmperf.svmperf method)": [[12, "quapy.classification.svmperf.SVMperf.predict"]], "predict_proba() (quapy.classification.calibration.recalibratedprobabilisticclassifierbase method)": [[12, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase.predict_proba"]], "predict_proba() (quapy.classification.methods.lowranklogisticregression method)": [[12, "quapy.classification.methods.LowRankLogisticRegression.predict_proba"]], "predict_proba() (quapy.classification.neural.neuralclassifiertrainer method)": [[12, "quapy.classification.neural.NeuralClassifierTrainer.predict_proba"]], "predict_proba() (quapy.classification.neural.textclassifiernet method)": [[12, "quapy.classification.neural.TextClassifierNet.predict_proba"]], "quapy.classification": [[12, "module-quapy.classification"]], "quapy.classification.calibration": [[12, "module-quapy.classification.calibration"]], "quapy.classification.methods": [[12, "module-quapy.classification.methods"]], "quapy.classification.neural": [[12, "module-quapy.classification.neural"]], "quapy.classification.svmperf": [[12, "module-quapy.classification.svmperf"]], "reset_net_params() (quapy.classification.neural.neuralclassifiertrainer method)": [[12, "quapy.classification.neural.NeuralClassifierTrainer.reset_net_params"]], "set_params() (quapy.classification.methods.lowranklogisticregression method)": [[12, "quapy.classification.methods.LowRankLogisticRegression.set_params"]], "set_params() (quapy.classification.neural.neuralclassifiertrainer method)": [[12, "quapy.classification.neural.NeuralClassifierTrainer.set_params"]], "training (quapy.classification.neural.cnnnet attribute)": [[12, "quapy.classification.neural.CNNnet.training"]], "training (quapy.classification.neural.lstmnet attribute)": [[12, "quapy.classification.neural.LSTMnet.training"]], "training (quapy.classification.neural.textclassifiernet attribute)": [[12, "quapy.classification.neural.TextClassifierNet.training"]], "transform() (quapy.classification.methods.lowranklogisticregression method)": [[12, "quapy.classification.methods.LowRankLogisticRegression.transform"]], "transform() (quapy.classification.neural.neuralclassifiertrainer method)": [[12, "quapy.classification.neural.NeuralClassifierTrainer.transform"]], "valid_losses (quapy.classification.svmperf.svmperf attribute)": [[12, "quapy.classification.svmperf.SVMperf.valid_losses"]], "vocabulary_size (quapy.classification.neural.cnnnet property)": [[12, "quapy.classification.neural.CNNnet.vocabulary_size"]], "vocabulary_size (quapy.classification.neural.lstmnet property)": [[12, "quapy.classification.neural.LSTMnet.vocabulary_size"]], "vocabulary_size (quapy.classification.neural.textclassifiernet property)": [[12, "quapy.classification.neural.TextClassifierNet.vocabulary_size"]], "xavier_uniform() (quapy.classification.neural.textclassifiernet method)": [[12, "quapy.classification.neural.TextClassifierNet.xavier_uniform"]], "dataset (class in quapy.data.base)": [[13, "quapy.data.base.Dataset"]], "indextransformer (class in quapy.data.preprocessing)": [[13, "quapy.data.preprocessing.IndexTransformer"]], "labelledcollection (class in quapy.data.base)": [[13, "quapy.data.base.LabelledCollection"]], "splitstratified() (quapy.data.base.dataset class method)": [[13, "quapy.data.base.Dataset.SplitStratified"]], "x (quapy.data.base.labelledcollection property)": [[13, "quapy.data.base.LabelledCollection.X"]], "xp (quapy.data.base.labelledcollection property)": [[13, "quapy.data.base.LabelledCollection.Xp"]], "xy (quapy.data.base.labelledcollection property)": [[13, "quapy.data.base.LabelledCollection.Xy"]], "add_word() (quapy.data.preprocessing.indextransformer method)": [[13, "quapy.data.preprocessing.IndexTransformer.add_word"]], "binarize() (in module quapy.data.reader)": [[13, "quapy.data.reader.binarize"]], "binary (quapy.data.base.dataset property)": [[13, "quapy.data.base.Dataset.binary"]], "binary (quapy.data.base.labelledcollection property)": [[13, "quapy.data.base.LabelledCollection.binary"]], "classes_ (quapy.data.base.dataset property)": [[13, "quapy.data.base.Dataset.classes_"]], "counts() (quapy.data.base.labelledcollection method)": [[13, "quapy.data.base.LabelledCollection.counts"]], "fetch_ucidataset() (in module quapy.data.datasets)": [[13, "quapy.data.datasets.fetch_UCIDataset"]], "fetch_ucilabelledcollection() (in module quapy.data.datasets)": [[13, "quapy.data.datasets.fetch_UCILabelledCollection"]], "fetch_lequa2022() (in module quapy.data.datasets)": [[13, "quapy.data.datasets.fetch_lequa2022"]], "fetch_reviews() (in module quapy.data.datasets)": [[13, "quapy.data.datasets.fetch_reviews"]], "fetch_twitter() (in module quapy.data.datasets)": [[13, "quapy.data.datasets.fetch_twitter"]], "fit() (quapy.data.preprocessing.indextransformer method)": [[13, "quapy.data.preprocessing.IndexTransformer.fit"]], "fit_transform() (quapy.data.preprocessing.indextransformer method)": [[13, "quapy.data.preprocessing.IndexTransformer.fit_transform"]], "from_csv() (in module quapy.data.reader)": [[13, "quapy.data.reader.from_csv"]], "from_sparse() (in module quapy.data.reader)": [[13, "quapy.data.reader.from_sparse"]], "from_text() (in module quapy.data.reader)": [[13, "quapy.data.reader.from_text"]], "index() (in module quapy.data.preprocessing)": [[13, "quapy.data.preprocessing.index"]], "join() (quapy.data.base.labelledcollection class method)": [[13, "quapy.data.base.LabelledCollection.join"]], "kfcv() (quapy.data.base.dataset class method)": [[13, "quapy.data.base.Dataset.kFCV"]], "kfcv() (quapy.data.base.labelledcollection method)": [[13, "quapy.data.base.LabelledCollection.kFCV"]], "load() (quapy.data.base.dataset class method)": [[13, "quapy.data.base.Dataset.load"]], "load() (quapy.data.base.labelledcollection class method)": [[13, "quapy.data.base.LabelledCollection.load"]], "n_classes (quapy.data.base.dataset property)": [[13, "quapy.data.base.Dataset.n_classes"]], "n_classes (quapy.data.base.labelledcollection property)": [[13, "quapy.data.base.LabelledCollection.n_classes"]], "p (quapy.data.base.labelledcollection property)": [[13, "quapy.data.base.LabelledCollection.p"]], "prevalence() (quapy.data.base.labelledcollection method)": [[13, "quapy.data.base.LabelledCollection.prevalence"]], "quapy.data": [[13, "module-quapy.data"]], "quapy.data.base": [[13, "module-quapy.data.base"]], "quapy.data.datasets": [[13, "module-quapy.data.datasets"]], "quapy.data.preprocessing": [[13, "module-quapy.data.preprocessing"]], "quapy.data.reader": [[13, "module-quapy.data.reader"]], "reduce() (quapy.data.base.dataset method)": [[13, "quapy.data.base.Dataset.reduce"]], "reduce_columns() (in module quapy.data.preprocessing)": [[13, "quapy.data.preprocessing.reduce_columns"]], "reindex_labels() (in module quapy.data.reader)": [[13, "quapy.data.reader.reindex_labels"]], "sampling() (quapy.data.base.labelledcollection method)": [[13, "quapy.data.base.LabelledCollection.sampling"]], "sampling_from_index() (quapy.data.base.labelledcollection method)": [[13, "quapy.data.base.LabelledCollection.sampling_from_index"]], "sampling_index() (quapy.data.base.labelledcollection method)": [[13, "quapy.data.base.LabelledCollection.sampling_index"]], "split_random() (quapy.data.base.labelledcollection method)": [[13, "quapy.data.base.LabelledCollection.split_random"]], "split_stratified() (quapy.data.base.labelledcollection method)": [[13, "quapy.data.base.LabelledCollection.split_stratified"]], "standardize() (in module quapy.data.preprocessing)": [[13, "quapy.data.preprocessing.standardize"]], "stats() (quapy.data.base.dataset method)": [[13, "quapy.data.base.Dataset.stats"]], "stats() (quapy.data.base.labelledcollection method)": [[13, "quapy.data.base.LabelledCollection.stats"]], "text2tfidf() (in module quapy.data.preprocessing)": [[13, "quapy.data.preprocessing.text2tfidf"]], "train_test (quapy.data.base.dataset property)": [[13, "quapy.data.base.Dataset.train_test"]], "transform() (quapy.data.preprocessing.indextransformer method)": [[13, "quapy.data.preprocessing.IndexTransformer.transform"]], "uniform_sampling() (quapy.data.base.labelledcollection method)": [[13, "quapy.data.base.LabelledCollection.uniform_sampling"]], "uniform_sampling_index() (quapy.data.base.labelledcollection method)": [[13, "quapy.data.base.LabelledCollection.uniform_sampling_index"]], "vocabulary_size (quapy.data.base.dataset property)": [[13, "quapy.data.base.Dataset.vocabulary_size"]], "vocabulary_size() (quapy.data.preprocessing.indextransformer method)": [[13, "quapy.data.preprocessing.IndexTransformer.vocabulary_size"]], "warn() (in module quapy.data.datasets)": [[13, "quapy.data.datasets.warn"]], "y (quapy.data.base.labelledcollection property)": [[13, "quapy.data.base.LabelledCollection.y"]], "acc (class in quapy.method.aggregative)": [[14, "quapy.method.aggregative.ACC"]], "adjustedclassifyandcount (in module quapy.method.aggregative)": [[14, "quapy.method.aggregative.AdjustedClassifyAndCount"]], "aggregativeprobabilisticquantifier (class in quapy.method.aggregative)": [[14, "quapy.method.aggregative.AggregativeProbabilisticQuantifier"]], "aggregativequantifier (class in quapy.method.aggregative)": [[14, "quapy.method.aggregative.AggregativeQuantifier"]], "basequantifier (class in quapy.method.base)": [[14, "quapy.method.base.BaseQuantifier"]], "binaryquantifier (class in quapy.method.base)": [[14, "quapy.method.base.BinaryQuantifier"]], "cc (class in quapy.method.aggregative)": [[14, "quapy.method.aggregative.CC"]], "classifyandcount (in module quapy.method.aggregative)": [[14, "quapy.method.aggregative.ClassifyAndCount"]], "distributionmatching (class in quapy.method.aggregative)": [[14, "quapy.method.aggregative.DistributionMatching"]], "dys (class in quapy.method.aggregative)": [[14, "quapy.method.aggregative.DyS"]], "eacc() (in module quapy.method.meta)": [[14, "quapy.method.meta.EACC"]], "ecc() (in module quapy.method.meta)": [[14, "quapy.method.meta.ECC"]], "eemq() (in module quapy.method.meta)": [[14, "quapy.method.meta.EEMQ"]], "ehdy() (in module quapy.method.meta)": [[14, "quapy.method.meta.EHDy"]], "em() (quapy.method.aggregative.emq class method)": [[14, "quapy.method.aggregative.EMQ.EM"]], "emq (class in quapy.method.aggregative)": [[14, "quapy.method.aggregative.EMQ"]], "epacc() (in module quapy.method.meta)": [[14, "quapy.method.meta.EPACC"]], "epsilon (quapy.method.aggregative.emq attribute)": [[14, "quapy.method.aggregative.EMQ.EPSILON"]], "ensemble (class in quapy.method.meta)": [[14, "quapy.method.meta.Ensemble"]], "expectationmaximizationquantifier (in module quapy.method.aggregative)": [[14, "quapy.method.aggregative.ExpectationMaximizationQuantifier"]], "hdy (class in quapy.method.aggregative)": [[14, "quapy.method.aggregative.HDy"]], "hellingerdistancey (in module quapy.method.aggregative)": [[14, "quapy.method.aggregative.HellingerDistanceY"]], "max (class in quapy.method.aggregative)": [[14, "quapy.method.aggregative.MAX"]], "max_iter (quapy.method.aggregative.emq attribute)": [[14, "quapy.method.aggregative.EMQ.MAX_ITER"]], "ms (class in quapy.method.aggregative)": [[14, "quapy.method.aggregative.MS"]], "ms2 (class in quapy.method.aggregative)": [[14, "quapy.method.aggregative.MS2"]], "maximumlikelihoodprevalenceestimation (class in quapy.method.non_aggregative)": [[14, "quapy.method.non_aggregative.MaximumLikelihoodPrevalenceEstimation"]], "mediansweep (in module quapy.method.aggregative)": [[14, "quapy.method.aggregative.MedianSweep"]], "mediansweep2 (in module quapy.method.aggregative)": [[14, "quapy.method.aggregative.MedianSweep2"]], "onevsall (class in quapy.method.base)": [[14, "quapy.method.base.OneVsAll"]], "onevsallaggregative (class in quapy.method.aggregative)": [[14, "quapy.method.aggregative.OneVsAllAggregative"]], "onevsallgeneric (class in quapy.method.base)": [[14, "quapy.method.base.OneVsAllGeneric"]], "pacc (class in quapy.method.aggregative)": [[14, "quapy.method.aggregative.PACC"]], "pcc (class in quapy.method.aggregative)": [[14, "quapy.method.aggregative.PCC"]], "probabilisticadjustedclassifyandcount (in module quapy.method.aggregative)": [[14, "quapy.method.aggregative.ProbabilisticAdjustedClassifyAndCount"]], "probabilisticclassifyandcount (in module quapy.method.aggregative)": [[14, "quapy.method.aggregative.ProbabilisticClassifyAndCount"]], "quanetmodule (class in quapy.method.neural)": [[14, "quapy.method.neural.QuaNetModule"]], "quanettrainer (class in quapy.method.neural)": [[14, "quapy.method.neural.QuaNetTrainer"]], "sld (in module quapy.method.aggregative)": [[14, "quapy.method.aggregative.SLD"]], "smm (class in quapy.method.aggregative)": [[14, "quapy.method.aggregative.SMM"]], "t50 (class in quapy.method.aggregative)": [[14, "quapy.method.aggregative.T50"]], "thresholdoptimization (class in quapy.method.aggregative)": [[14, "quapy.method.aggregative.ThresholdOptimization"]], "valid_policies (quapy.method.meta.ensemble attribute)": [[14, "quapy.method.meta.Ensemble.VALID_POLICIES"]], "x (class in quapy.method.aggregative)": [[14, "quapy.method.aggregative.X"]], "aggregate() (quapy.method.aggregative.acc method)": [[14, "quapy.method.aggregative.ACC.aggregate"]], "aggregate() (quapy.method.aggregative.aggregativequantifier method)": [[14, "quapy.method.aggregative.AggregativeQuantifier.aggregate"]], "aggregate() (quapy.method.aggregative.cc method)": [[14, "quapy.method.aggregative.CC.aggregate"]], "aggregate() (quapy.method.aggregative.distributionmatching method)": [[14, "quapy.method.aggregative.DistributionMatching.aggregate"]], "aggregate() (quapy.method.aggregative.dys method)": [[14, "quapy.method.aggregative.DyS.aggregate"]], "aggregate() (quapy.method.aggregative.emq method)": [[14, "quapy.method.aggregative.EMQ.aggregate"]], "aggregate() (quapy.method.aggregative.hdy method)": [[14, "quapy.method.aggregative.HDy.aggregate"]], "aggregate() (quapy.method.aggregative.onevsallaggregative method)": [[14, "quapy.method.aggregative.OneVsAllAggregative.aggregate"]], "aggregate() (quapy.method.aggregative.pacc method)": [[14, "quapy.method.aggregative.PACC.aggregate"]], "aggregate() (quapy.method.aggregative.pcc method)": [[14, "quapy.method.aggregative.PCC.aggregate"]], "aggregate() (quapy.method.aggregative.smm method)": [[14, "quapy.method.aggregative.SMM.aggregate"]], "aggregate() (quapy.method.aggregative.thresholdoptimization method)": [[14, "quapy.method.aggregative.ThresholdOptimization.aggregate"]], "aggregative (quapy.method.meta.ensemble property)": [[14, "quapy.method.meta.Ensemble.aggregative"]], "classes_ (quapy.method.aggregative.aggregativequantifier property)": [[14, "quapy.method.aggregative.AggregativeQuantifier.classes_"]], "classes_ (quapy.method.base.onevsallgeneric property)": [[14, "quapy.method.base.OneVsAllGeneric.classes_"]], "classes_ (quapy.method.neural.quanettrainer property)": [[14, "quapy.method.neural.QuaNetTrainer.classes_"]], "classifier (quapy.method.aggregative.aggregativequantifier property)": [[14, "quapy.method.aggregative.AggregativeQuantifier.classifier"]], "classify() (quapy.method.aggregative.acc method)": [[14, "quapy.method.aggregative.ACC.classify"]], "classify() (quapy.method.aggregative.aggregativeprobabilisticquantifier method)": [[14, "quapy.method.aggregative.AggregativeProbabilisticQuantifier.classify"]], "classify() (quapy.method.aggregative.aggregativequantifier method)": [[14, "quapy.method.aggregative.AggregativeQuantifier.classify"]], "classify() (quapy.method.aggregative.onevsallaggregative method)": [[14, "quapy.method.aggregative.OneVsAllAggregative.classify"]], "classify() (quapy.method.aggregative.pacc method)": [[14, "quapy.method.aggregative.PACC.classify"]], "clean_checkpoint() (quapy.method.neural.quanettrainer method)": [[14, "quapy.method.neural.QuaNetTrainer.clean_checkpoint"]], "clean_checkpoint_dir() (quapy.method.neural.quanettrainer method)": [[14, "quapy.method.neural.QuaNetTrainer.clean_checkpoint_dir"]], "cross_generate_predictions() (in module quapy.method.aggregative)": [[14, "quapy.method.aggregative.cross_generate_predictions"]], "cross_generate_predictions_depr() (in module quapy.method.aggregative)": [[14, "quapy.method.aggregative.cross_generate_predictions_depr"]], "device (quapy.method.neural.quanetmodule property)": [[14, "quapy.method.neural.QuaNetModule.device"]], "ensemblefactory() (in module quapy.method.meta)": [[14, "quapy.method.meta.ensembleFactory"]], "fit() (quapy.method.aggregative.acc method)": [[14, "quapy.method.aggregative.ACC.fit"]], "fit() (quapy.method.aggregative.aggregativequantifier method)": [[14, "quapy.method.aggregative.AggregativeQuantifier.fit"]], "fit() (quapy.method.aggregative.cc method)": [[14, "quapy.method.aggregative.CC.fit"]], "fit() (quapy.method.aggregative.distributionmatching method)": [[14, "quapy.method.aggregative.DistributionMatching.fit"]], "fit() (quapy.method.aggregative.dys method)": [[14, "quapy.method.aggregative.DyS.fit"]], "fit() (quapy.method.aggregative.emq method)": [[14, "quapy.method.aggregative.EMQ.fit"]], "fit() (quapy.method.aggregative.hdy method)": [[14, "quapy.method.aggregative.HDy.fit"]], "fit() (quapy.method.aggregative.pacc method)": [[14, "quapy.method.aggregative.PACC.fit"]], "fit() (quapy.method.aggregative.pcc method)": [[14, "quapy.method.aggregative.PCC.fit"]], "fit() (quapy.method.aggregative.smm method)": [[14, "quapy.method.aggregative.SMM.fit"]], "fit() (quapy.method.aggregative.thresholdoptimization method)": [[14, "quapy.method.aggregative.ThresholdOptimization.fit"]], "fit() (quapy.method.base.basequantifier method)": [[14, "quapy.method.base.BaseQuantifier.fit"]], "fit() (quapy.method.base.onevsallgeneric method)": [[14, "quapy.method.base.OneVsAllGeneric.fit"]], "fit() (quapy.method.meta.ensemble method)": [[14, "quapy.method.meta.Ensemble.fit"]], "fit() (quapy.method.neural.quanettrainer method)": [[14, "quapy.method.neural.QuaNetTrainer.fit"]], "fit() (quapy.method.non_aggregative.maximumlikelihoodprevalenceestimation method)": [[14, "quapy.method.non_aggregative.MaximumLikelihoodPrevalenceEstimation.fit"]], "forward() (quapy.method.neural.quanetmodule method)": [[14, "quapy.method.neural.QuaNetModule.forward"]], "getptecondestim() (quapy.method.aggregative.acc class method)": [[14, "quapy.method.aggregative.ACC.getPteCondEstim"]], "getptecondestim() (quapy.method.aggregative.pacc class method)": [[14, "quapy.method.aggregative.PACC.getPteCondEstim"]], "get_params() (quapy.method.meta.ensemble method)": [[14, "quapy.method.meta.Ensemble.get_params"]], "get_params() (quapy.method.neural.quanettrainer method)": [[14, "quapy.method.neural.QuaNetTrainer.get_params"]], "get_probability_distribution() (in module quapy.method.meta)": [[14, "quapy.method.meta.get_probability_distribution"]], "mae_loss() (in module quapy.method.neural)": [[14, "quapy.method.neural.mae_loss"]], "newelm() (in module quapy.method.aggregative)": [[14, "quapy.method.aggregative.newELM"]], "newonevsall() (in module quapy.method.base)": [[14, "quapy.method.base.newOneVsAll"]], "newsvmae() (in module quapy.method.aggregative)": [[14, "quapy.method.aggregative.newSVMAE"]], "newsvmkld() (in module quapy.method.aggregative)": [[14, "quapy.method.aggregative.newSVMKLD"]], "newsvmq() (in module quapy.method.aggregative)": [[14, "quapy.method.aggregative.newSVMQ"]], "newsvmrae() (in module quapy.method.aggregative)": [[14, "quapy.method.aggregative.newSVMRAE"]], "predict_proba() (quapy.method.aggregative.emq method)": [[14, "quapy.method.aggregative.EMQ.predict_proba"]], "probabilistic (quapy.method.meta.ensemble property)": [[14, "quapy.method.meta.Ensemble.probabilistic"]], "quantify() (quapy.method.aggregative.aggregativequantifier method)": [[14, "quapy.method.aggregative.AggregativeQuantifier.quantify"]], "quantify() (quapy.method.base.basequantifier method)": [[14, "quapy.method.base.BaseQuantifier.quantify"]], "quantify() (quapy.method.base.onevsallgeneric method)": [[14, "quapy.method.base.OneVsAllGeneric.quantify"]], "quantify() (quapy.method.meta.ensemble method)": [[14, "quapy.method.meta.Ensemble.quantify"]], "quantify() (quapy.method.neural.quanettrainer method)": [[14, "quapy.method.neural.QuaNetTrainer.quantify"]], "quantify() (quapy.method.non_aggregative.maximumlikelihoodprevalenceestimation method)": [[14, "quapy.method.non_aggregative.MaximumLikelihoodPrevalenceEstimation.quantify"]], "quapy.method": [[14, "module-quapy.method"]], "quapy.method.aggregative": [[14, "module-quapy.method.aggregative"]], "quapy.method.base": [[14, "module-quapy.method.base"]], "quapy.method.meta": [[14, "module-quapy.method.meta"]], "quapy.method.neural": [[14, "module-quapy.method.neural"]], "quapy.method.non_aggregative": [[14, "module-quapy.method.non_aggregative"]], "set_params() (quapy.method.meta.ensemble method)": [[14, "quapy.method.meta.Ensemble.set_params"]], "set_params() (quapy.method.neural.quanettrainer method)": [[14, "quapy.method.neural.QuaNetTrainer.set_params"]], "solve_adjustment() (quapy.method.aggregative.acc class method)": [[14, "quapy.method.aggregative.ACC.solve_adjustment"]], "training (quapy.method.neural.quanetmodule attribute)": [[14, "quapy.method.neural.QuaNetModule.training"]]}})